# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "stac/**"
      - "data/**"
      - "web/**"
      - "scripts/**"
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "stac/**"
      - "data/**"
      - "web/**"
      - "scripts/**"
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/ci.yml"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff autodetect)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Detect & run ruff
        shell: bash
        run: |
          set -euo pipefail
          if grep -qE '^\[tool\.ruff\]' pyproject.toml 2>/dev/null || [ -f ruff.toml ] || [ -f .ruff.toml ]; then
            python -m pip install --upgrade pip
            pip install ruff
            echo "::add-matcher::.github/matchers/ruff.json" || true
            ruff --version
            ruff check .
          else
            echo "No ruff config detected; skipping."
          fi

  test:
    name: Pytest (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    env:
      PYTHONUNBUFFERED: "1"
      CPLUS_INCLUDE_PATH: /usr/include/gdal
      C_INCLUDE_PATH: /usr/include/gdal
      PROJ_LIB: /usr/share/proj
      PROJ_NETWORK: "OFF"   # keep pyproj/GDAL from reaching out

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: (Conditional) Install geo system deps
        id: need_geo
        shell: bash
        run: |
          set -euo pipefail
          need=false
          for f in requirements*.txt pyproject.toml; do
            [ -f "$f" ] || continue
            if grep -Ei '(^|[[:space:]])(gdal|rasterio|geopandas|fiona|pyproj|rtree|spatialite|shapely)($|[[:space:]])' "$f"; then
              need=true; break
            fi
          done
          echo "need=$need" >> "$GITHUB_OUTPUT"
          sudo apt-get update -y
          if $need; then
            sudo apt-get install -y --no-install-recommends \
              gdal-bin libgdal-dev libspatialindex-dev libsqlite3-mod-spatialite jq
            gdalinfo --version || true
            ogrinfo --version || true
          else
            sudo apt-get install -y --no-install-recommends jq
          fi

      - name: Install Python deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # test essentials
          pip install pytest pytest-cov jsonschema || pip install pytest jsonschema
          # project (prefer dev extras)
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e .
          fi
          python - <<'PY'
import sys, platform
print("Python:", sys.version.split()[0])
print("Platform:", platform.platform())
PY

      - name: Run tests (with coverage if available)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .artifacts
          echo "::add-matcher::.github/matchers/pytest.json" || true
          if python -c "import pytest_cov" 2>/dev/null; then
            pytest -q --maxfail=1 --disable-warnings \
              --cov=. --cov-report=xml:.artifacts/coverage.xml \
              --junitxml=.artifacts/pytest-report.xml
          else
            pytest -q --maxfail=1 --disable-warnings \
              --junitxml=.artifacts/pytest-report.xml
          fi
          echo "### Pytest (py ${{ matrix.python-version }})" >> "$GITHUB_STEP_SUMMARY"
          if [ -f .artifacts/coverage.xml ]; then
            py - <<'PY' 2>/dev/null || python - <<'PY'
import xml.etree.ElementTree as ET, sys
try:
    root=ET.parse(".artifacts/coverage.xml").getroot()
    rate=float(root.attrib.get("line-rate",0))*100
    print(f"- Coverage: {rate:.1f}%")
except Exception:
    print("- Coverage: generated")
PY >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Coverage: n/a" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-py${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            .artifacts/pytest-report.xml
            .artifacts/coverage.xml
          if-no-files-found: warn
          retention-days: 14

  web:
    name: Web tests/build
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: hashFiles('web/package.json') != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/pnpm-lock.yaml ]; then
            echo "pm=pnpm" >> "$GITHUB_OUTPUT"
            echo "lock=web/pnpm-lock.yaml" >> "$GITHUB_OUTPUT"
          elif [ -f web/yarn.lock ]; then
            echo "pm=yarn" >> "$GITHUB_OUTPUT"
            echo "lock=web/yarn.lock" >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "lock=web/package-lock.json" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ steps.pm.outputs.lock }}

      - name: Install deps
        working-directory: web
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm@9
            pnpm install --frozen-lockfile
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Run web tests (if defined)
        working-directory: web
        shell: bash
        run: |
          set -euo pipefail
          if npm run | grep -qE '^ *test( |:|$)'; then
            npm test --silent || npm test
          else
            echo "No test script in web/; skipping."
          fi

      - name: Build web (if build script exists)
        working-directory: web
        shell: bash
        run: |
          set -euo pipefail
          if npm run | grep -qE '^ *build( |:|$)'; then
            npm run build
            echo "### Web build" >> "$GITHUB_STEP_SUMMARY"
            echo "- Built web assets successfully" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No build script in web/; skipping."
          fi