# .github/workflows/stac.yml
name: STAC & Config

on:
  push:
    branches: [ main ]
    paths:
      - "stac/**"
      - "src/**"
      - "web/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/stac.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "stac/**"
      - "src/**"
      - "web/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/stac.yml"
  workflow_dispatch:

concurrency:
  group: stac-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  validate-and-render:
    name: Validate STAC & Render app.config.json
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends jq

      - name: Validate JSON syntax (configs & STAC)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          summary="### JSON syntax check\n"
          fail=0

          check() {
            local f="$1"
            echo "Checking: $f"
            if jq -e . "$f" >/dev/null 2>&1; then
              summary+="- ✅ $f\n"
            else
              summary+="- ❌ $f\n"
              echo "::error file=$f::Invalid JSON"
              fail=1
            fi
          }

          # Web configs (support nested folders)
          for f in web/app.config.json web/layers.json web/config/**/*.json; do
            [ -e "$f" ] && check "$f"
          done

          # STAC JSON (catalog/collections/items)
          for f in stac/**/*.json; do
            [ -e "$f" ] && check "$f"
          done

          echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
          exit $fail

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Cache pip (explicit)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.11-
            ${{ runner.os }}-pip-

      - name: Install dependencies (CLI + validators)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

          # Always ensure these are around for schema/render/validate
          pip install --upgrade jsonschema jinja2 pystac stac-validator

          # Install project (editable) so console_scripts like `kgt` resolve if provided
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e .
          fi

          python - <<'PY'
import sys, jsonschema, pystac
print("Python:", sys.version.split()[0])
print("jsonschema:", jsonschema.__version__)
print("pystac:", pystac.__version__)
PY

      - name: Detect renderer/CLI
        id: detect_cli
        shell: bash
        run: |
          set -euo pipefail
          if command -v kgt >/dev/null 2>&1; then
            echo "renderer=kgt" >> "$GITHUB_OUTPUT"
          elif python -c "import importlib.util; import sys; sys.exit(0 if importlib.util.find_spec('src.kansas_geo_timeline.cli') else 3)"; then
            echo "renderer=module" >> "$GITHUB_OUTPUT"
          else
            echo "renderer=none" >> "$GITHUB_OUTPUT"
            echo "::warning title=Renderer not found::Neither 'kgt' nor module CLI available; render will be skipped unless app.config.json already exists."
          fi

      - name: Validate STAC (catalog, collections, items)
        id: stac_validate
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .artifacts
          summary="### STAC validation\n"
          # Prefer the stac-validator CLI if present; otherwise fallback to pystac validation.
          if command -v stac-validator >/dev/null 2>&1; then
            echo "Using stac-validator CLI"
            # Validate the root catalog if present; otherwise scan all json files.
            if [ -f stac/catalog.json ]; then
              if stac-validator stac/catalog.json --recursive --links > .artifacts/stac_validator.txt; then
                summary+="- ✅ stac/catalog.json (recursive)\n"
              else
                summary+="- ❌ stac/catalog.json (recursive)\n"
                cat .artifacts/stac_validator.txt
                echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
                exit 2
              fi
            else
              # Fallback: validate each file we find
              set +e
              ok=1
              for f in stac/**/*.json; do
                [ -e "$f" ] || continue
                stac-validator "$f" >> .artifacts/stac_validator.txt 2>&1 || ok=0
              done
              set -e
              if [ $ok -eq 1 ]; then
                summary+="- ✅ stac/**/*.json\n"
              else
                summary+="- ❌ stac/**/*.json (see artifact)\n"
                echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
                cat .artifacts/stac_validator.txt
                exit 2
              fi
            fi
          else
            echo "Using pystac validation"
            python - <<'PY'
import json, sys, pathlib
import pystac
root = pathlib.Path("stac")
if not root.exists():
    print("::warning ::No 'stac/' directory found; skipping STAC validation")
    sys.exit(0)
def validate(p: pathlib.Path):
    try:
        obj = pystac.read_file(str(p))
        obj.validate()
        return True, None
    except Exception as e:
        return False, str(e)
bad = []
for p in sorted(root.rglob("*.json")):
    ok, err = validate(p)
    if not ok:
        bad.append((str(p), err))
if bad:
    for p, err in bad:
        print(f"::error file={p}::{err}")
    sys.exit(2)
print("All STAC JSON passed pystac validation")
PY
            summary+="- ✅ pystac validation\n"
          fi
          echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
          # produce a tiny machine-readable summary
          echo '{"status":"ok"}' > .artifacts/stac_report.json || echo '{}' > .artifacts/stac_report.json

      - name: Render web/app.config.json (from STAC)
        id: render_app_cfg
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.detect_cli.outputs.renderer }}" in
            kgt)
              kgt render-config --stac stac/items --output web/app.config.json --pretty
              ;;
            module)
              python -m src.kansas_geo_timeline.cli render-config \
                --stac stac/items \
                --output web/app.config.json \
                --pretty
              ;;
            *)
              if [ -f web/app.config.json ]; then
                echo "::notice title=Renderer unavailable::Using existing web/app.config.json"
              else
                echo "::warning title=No renderer and no app.config.json::Skipping render step"
              fi
              ;;
          esac
          if [ -f web/app.config.json ]; then
            jq -e . web/app.config.json >/dev/null
            echo "### Render" >> "$GITHUB_STEP_SUMMARY"
            echo "- ✅ web/app.config.json rendered/validated" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Schema-validate app.config.json (if schema present)
        if: always()
        run: |
          set -euo pipefail
          if [ -f web/app.config.json ] && [ -f web/config/app.config.schema.json ]; then
            python - <<'PY'
import json, sys
from jsonschema import Draft202012Validator
cfg = json.load(open("web/app.config.json", encoding="utf-8"))
sch = json.load(open("web/config/app.config.schema.json", encoding="utf-8"))
errs = sorted(Draft202012Validator(sch).iter_errors(cfg), key=lambda e: e.path)
if errs:
    for e in errs:
        print("-", "/".join(map(str, e.path)), ":", e.message)
    sys.exit(2)
print("app.config.json ✔ schema-valid")
PY
          else
            echo "::notice title=Schema or config missing::Skipped app.config.json schema validation"
          fi

      - name: Schema-validate layers.json (if present)
        if: always()
        run: |
          set -euo pipefail
          if [ -f web/layers.json ] && [ -f web/config/layers.schema.json ]; then
            python - <<'PY'
import json, sys
from jsonschema import Draft202012Validator
cfg = json.load(open("web/layers.json", encoding="utf-8"))
sch = json.load(open("web/config/layers.schema.json", encoding="utf-8"))
errs = sorted(Draft202012Validator(sch).iter_errors(cfg), key=lambda e: e.path)
if errs:
    for e in errs:
        print("-", "/".join(map(str, e.path)), ":", e.message)
    sys.exit(2)
print("layers.json ✔ schema-valid")
PY
          else
            echo "::notice title=Schema or layers missing::Skipped layers.json schema validation"
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stac-${{ github.run_id }}
          path: |
            .artifacts/stac_report.json
            .artifacts/stac_validator.txt
            web/app.config.json
          if-no-files-found: warn
          retention-days: 14