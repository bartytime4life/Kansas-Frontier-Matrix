name: STAC Validation

on:
  pull_request:
    paths:
      - "stac/**"
      - "data/sources/**"
      - "src/**"
      - "scripts/validate_stac.py"
      - "scripts/validate_sources.py"
      - "Makefile"
      - "requirements.txt"
      - "pyproject.toml"
  push:
    branches: [ main ]
    paths:
      - "stac/**"
      - "data/sources/**"
      - "src/**"
      - "scripts/validate_stac.py"
      - "scripts/validate_sources.py"
      - "Makefile"
      - "requirements.txt"
      - "pyproject.toml"

permissions:
  contents: read

concurrency:
  group: "stac-validate-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  validate:
    name: STAC validate (py${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install deps (project if available; otherwise minimal)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f "pyproject.toml" ]; then
            # Try to install the project (editable ok for CLI exposure)
            pip install -e . || true
            # If you have optional extras for validation, try them too
            pip install ".[dev,validate]" || true
          fi
          # Core validators regardless of project install
          pip install --upgrade --quiet \
            jsonschema \
            jinja2 \
            pystac \
            pystac-client || true

      # ------------------------------------------------------------
      # JSON syntax sanity checks (STAC + data/sources)
      # ------------------------------------------------------------
      - name: Quick JSON syntax check (stac/**/*.json)
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, sys, pathlib
          base = pathlib.Path("stac")
          if not base.exists():
              print("::notice::stac/ not present; skipping.")
              sys.exit(0)
          bad=[]
          for p in base.rglob("*.json"):
              try:
                  json.loads(p.read_text(encoding="utf-8"))
              except Exception as e:
                  bad.append((str(p), str(e)))
          if bad:
              for f,e in bad:
                  print(f"::error file={f}::JSON parse error: {e}")
              sys.exit(1)
          PY

      - name: Quick JSON syntax check (data/sources/**/*.json)
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, sys, pathlib
          base = pathlib.Path("data/sources")
          if not base.exists():
              print("::notice::data/sources/ not present; skipping.")
              sys.exit(0)
          bad=[]
          for p in base.rglob("*.json"):
              try:
                  json.loads(p.read_text(encoding="utf-8"))
              except Exception as e:
                  bad.append((str(p), str(e)))
          if bad:
              for f,e in bad:
                  print(f"::error file={f}::JSON parse error: {e}")
              sys.exit(1)
          PY

      # ------------------------------------------------------------
      # Run your custom validators if present
      # ------------------------------------------------------------
      - name: Run scripts/validate_sources.py (if present)
        run: |
          set -euo pipefail
          if [ -f scripts/validate_sources.py ]; then
            python scripts/validate_sources.py
          else
            echo "::notice::scripts/validate_sources.py not found; skipping."
          fi

      - name: Run scripts/validate_stac.py (if present)
        id: script_stac
        run: |
          set -euo pipefail
          mkdir -p build
          if [ -f scripts/validate_stac.py ]; then
            python scripts/validate_stac.py --report build/stac_report.json || true
          else
            echo "::notice::scripts/validate_stac.py not found; using fallback."
          fi

      # ------------------------------------------------------------
      # Fallback STAC item validator (when your script/CLI absent)
      # Produces build/stac_report.json and fails on invalid items.
      # ------------------------------------------------------------
      - name: Fallback STAC item validator
        if: |
          !cancelled() && steps.script_stac.outcome == 'success' && !hashFiles('build/stac_report.json')
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, pathlib, sys
          items_dir = pathlib.Path("stac/items")
          if not items_dir.exists():
              print("::notice::stac/items not present; skipping item validation.")
              sys.exit(0)
          req = ["stac_version","id","type","geometry","bbox","properties","links","assets"]
          ok=bad=0; report=[]
          for p in items_dir.glob("*.json"):
              try:
                  d=json.loads(p.read_text(encoding="utf-8"))
              except Exception as e:
                  report.append({"id": str(p), "valid": False, "errors":[{"path":[],"message":str(e)}]}); bad+=1; continue
              errs=[]
              missing=[k for k in req if k not in d]
              if missing: errs.append(f"missing {missing}")
              if d.get("type")!="Feature": errs.append("type must be 'Feature'")
              if errs:
                  bad+=1
                  report.append({"id":d.get("id",str(p)),"valid":False,"errors":[{"path":[],"message":"; ".join(errs)}]})
              else:
                  ok+=1
                  report.append({"id":d.get("id",str(p)),"valid":True,"errors":[]})
          pathlib.Path("build").mkdir(exist_ok=True)
          pathlib.Path("build/stac_report.json").write_text(json.dumps({"valid":ok,"invalid":bad,"items":report}, indent=2))
          print(f"[RESULT] {ok} valid, {bad} invalid")
          if bad>0: sys.exit(2)
          PY

      # ------------------------------------------------------------
      # Catalog/Collections validation via pystac (best-effort)
      # ------------------------------------------------------------
      - name: Validate Catalog/Collections with pystac (best-effort)
        continue-on-error: true
        run: |
          set -euo pipefail
          if [ -f stac/catalog.json ]; then
            python - <<'PY'
            import pystac, sys
            try:
                cat = pystac.Catalog.from_file("stac/catalog.json")
                cat.normalize_hrefs("stac")
                cat.validate_all()
                print("pystac: catalog/collections validate OK")
            except Exception as e:
                print(f"::error::pystac validation failed: {e}")
                sys.exit(1)
            PY
          else
            echo "::notice::No stac/catalog.json; skipping catalog validation."
          fi

      # ------------------------------------------------------------
      # Summaries → Job Summary tab
      # ------------------------------------------------------------
      - name: Summarize results
        if: always()
        run: |
          set -euo pipefail
          SUMMARY="${GITHUB_STEP_SUMMARY:-/dev/stdout}"
          {
            echo "## STAC Validation"
            if [ -f build/stac_report.json ]; then
              python - <<'PY'
              import json, pathlib, os
              p = pathlib.Path("build/stac_report.json")
              d = json.loads(p.read_text()) if p.exists() else {}
              ok, bad = d.get("valid",0), d.get("invalid",0)
              print(f"- ✅ Valid items: **{ok}**")
              print(f"- ❌ Invalid items: **{bad}**")
              if bad:
                  print("\n<details><summary>First 10 errors</summary>\n")
                  cnt=0
                  for it in d.get("items", []):
                      if it.get("valid") is False and cnt<10:
                          msgs = ', '.join(e.get('message','') for e in it.get('errors',[])[:3])
                          print(f"- **{it.get('id')}** — {msgs}")
                          cnt+=1
                  print("\n</details>")
              PY
            else
              echo "- No STAC item report generated."
            fi
          } >> "$SUMMARY"

      - name: Upload reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: stac-validate-reports-py${{ matrix.python-version }}
          path: |
            build/**
            ./*.log
            ./stac-validate*.txt
            ./validate*.txt
          if-no-files-found: ignore
          retention-days: 7