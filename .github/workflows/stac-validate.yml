# .github/workflows/stac-validate.yml
name: STAC Validate

on:
  push:
    branches: [ main ]
    paths:
      - "stac/**"
      - ".github/workflows/stac-validate.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "stac/**"
      - ".github/workflows/stac-validate.yml"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  stac:
    name: Validate STAC (syntax • schema • links • assets)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure stac/ exists
        shell: bash
        run: |
          if [ ! -d stac ]; then
            echo "::notice::No stac/ directory found; nothing to validate."
            exit 0
          fi

      - name: Install jq & curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends jq curl

      # ---------- 1) Fast JSON syntax lint ----------
      - name: Validate JSON syntax (stac/**/*.json)
        id: jsonlint
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          summary="### STAC JSON syntax\n"
          fail=0
          files=(stac/**/*.json)
          if [ ${#files[@]} -eq 0 ]; then
            echo "::notice::No JSON files under stac/."
            exit 0
          fi
          for f in "${files[@]}"; do
            if jq -e . "$f" >/dev/null 2>&1; then
              summary+="- ✅ $f\n"
            else
              summary+="- ❌ $f\n"
              echo "::error file=$f::Invalid JSON"
              fail=1
            fi
          done
          echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
          exit $fail

      # ---------- 2) Python toolchain ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install validation deps
        run: |
          python -m pip install --upgrade pip
          pip install "pystac>=1.9,<2" "stac-validator>=3.0,<4" "jsonschema>=4.19,<5"

      # ---------- 3) STAC validation (CLI preferred) ----------
      - name: STAC validate (recursive if catalog.json; else per-file)
        id: stacval
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .artifacts
          summary="### STAC schema validation\n"
          if command -v stac-validator >/dev/null 2>&1; then
            if [ -f stac/catalog.json ]; then
              echo "Validating stac/catalog.json recursively…"
              if stac-validator stac/catalog.json --recursive --links | tee .artifacts/stac_validator.txt; then
                summary+="- ✅ catalog.json (recursive)\n"
              else
                summary+="- ❌ catalog.json (recursive)\n"
                echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
                exit 2
              fi
            else
              echo "Validating all STAC JSON files…"
              set +e; ok=1
              while IFS= read -r -d '' f; do
                stac-validator "$f" >> .artifacts/stac_validator.txt 2>&1 || ok=0
              done < <(find stac -type f -name '*.json' -print0 | sort -z)
              set -e
              [ $ok -eq 1 ] && summary+="- ✅ stac/**/*.json\n" || { summary+="- ❌ stac/**/*.json (see artifact)\n"; echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"; exit 2; }
            fi
          else
            echo "stac-validator not available; using pystac fallback…"
            python - <<'PY'
import sys, pathlib, pystac
root = pathlib.Path("stac")
bad=[]
for p in sorted(root.rglob("*.json")):
    try:
        pystac.read_file(str(p)).validate()
    except Exception as e:
        bad.append((str(p), str(e)))
if bad:
    for f,e in bad[:50]:
        print(f"::error file={f}::{e}")
    sys.exit(2)
print("pystac: all STAC JSON validate OK")
PY
            summary+="- ✅ pystac validation\n"
          fi
          echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"

      # ---------- 4) HTTP(S) link checks on assets & links ----------
      - name: Check HTTP(S) links in STAC (assets + links)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import json, pathlib, re, subprocess, sys, time

root = pathlib.Path("stac")
urls = []
for jf in sorted(root.rglob("*.json")):
    try:
        doc = json.loads(jf.read_text(encoding="utf-8"))
    except Exception:
        continue
    # assets
    assets = (doc.get("assets") or {})
    for k, a in assets.items():
        href = (a or {}).get("href")
        if isinstance(href, str) and re.match(r'^https?://', href):
            urls.append((str(jf), href))
    # links
    for link in (doc.get("links") or []):
        href = (link or {}).get("href")
        if isinstance(href, str) and re.match(r'^https?://', href):
            urls.append((str(jf), href))

bad = []
def head(url):
    # 10s connect timeout, 20s max, follow redirects, no body
    cmd = ["curl","-sSIL","--max-time","20","--connect-timeout","10","-o","/dev/null","-w","%{http_code}",url]
    try:
        code = subprocess.check_output(cmd, text=True).strip()
        return int(code) if code.isdigit() else 0
    except Exception:
        return 0

for jf, url in urls:
    code = head(url)
    if code < 200 or code >= 400:
        print(f"::error file={jf}::Bad URL ({code or 'ERR'}): {url}")
        bad.append(url)

sys.exit(2 if bad else 0)
PY

      # ---------- 5) Local asset existence + optional SHA-256 ----------
      - name: Verify local assets exist and checksums (checksum:sha256)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import json, pathlib, hashlib, sys
root = pathlib.Path("stac")
missing = 0
mismatch = 0

def sha256(p: pathlib.Path) -> str:
    h = hashlib.sha256()
    with p.open("rb") as f:
        for chunk in iter(lambda: f.read(1024*1024), b""):
            h.update(chunk)
    return h.hexdigest()

for jf in sorted(root.rglob("*.json")):
    try:
        doc = json.loads(jf.read_text(encoding="utf-8"))
    except Exception:
        continue
    assets = (doc.get("assets") or {})
    for name, a in assets.items():
        href = (a or {}).get("href")
        if not href or "://" in href:
            continue  # skip remote
        p = (jf.parent / href).resolve()
        if not p.exists():
            print(f"::error file={jf}::Missing local asset: {href}")
            missing += 1
            continue
        # optional checksum:sha256
        exp = (a or {}).get("checksum:sha256")
        if isinstance(exp, str) and len(exp) == 64:
            got = sha256(p)
            if got.lower() != exp.lower():
                print(f"::error file={jf}::Checksum mismatch for {href} (expected {exp}, got {got})")
                mismatch += 1

if missing or mismatch:
    sys.exit(2)
PY

      # ---------- 6) Artifacts ----------
      - name: Upload validator logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stac-validate-${{ github.run_id }}
          path: |
            .artifacts/stac_validator.txt
          if-no-files-found: warn
          retention-days: 14
