# .github/workflows/web-config-validate.yml
name: Web Config Validate

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "web/app.config.json"
      - "web/layers.json"
      - "web/config/**/*.json"
      - "web/data/**/*.json"
      - "tests/test_web_configs.py"
      - ".github/workflows/web-config-validate.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "web/app.config.json"
      - "web/layers.json"
      - "web/config/**/*.json"
      - "web/data/**/*.json"
      - "tests/test_web_configs.py"
      - ".github/workflows/web-config-validate.yml"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: JSON & Schema Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show changed files (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "Changed files (vs ${{ github.base_ref }}):" | tee -a "$GITHUB_STEP_SUMMARY"
          git fetch -q origin "${{ github.base_ref }}" || true
          git --no-pager diff --name-only "origin/${{ github.base_ref }}..." | sed 's/^/ - /' | tee -a "$GITHUB_STEP_SUMMARY" || true

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends jq

      # ---------- Strict JSON syntax ----------
      - name: Validate JSON syntax with jq
        id: jqcheck
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar

          # Gather all JSONs we care about (config + data)
          files=()
          [ -e web/app.config.json ] && files+=("web/app.config.json")
          [ -e web/layers.json ] && files+=("web/layers.json")
          for f in web/config/**/*.json; do files+=("$f"); done
          for f in web/data/**/*.json;   do files+=("$f"); done

          summary="### JSON syntax check\n"
          if [ "${#files[@]}" -eq 0 ]; then
            echo -e "${summary}(No web JSON files present)\n" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          fail=0
          for f in "${files[@]}"; do
            if jq -e . "$f" >/dev/null 2>&1; then
              summary+="- ✅ $f\n"
            else
              summary+="- ❌ $f\n"
              echo "::error file=$f::Invalid JSON"
              fail=1
            fi
          done
          echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
          exit $fail

      # ---------- Python setup & deps ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install schema tooling
        run: |
          python -m pip install --upgrade pip
          pip install "jsonschema==4.*" rfc3339-validator rfc3987

      # ---------- Validate local JSON Schemas themselves ----------
      - name: Validate local JSON Schemas (metaschema)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          SCHEMAS=(web/config/*.schema.json web/config/**/*.schema.json)
          if [ "${#SCHEMAS[@]}" -eq 0 ]; then
            echo "::notice::No local schemas found; skipping schema self-validation."
            exit 0
          fi
          python - <<'PY'
import sys, json, pathlib
from jsonschema.validators import Draft202012Validator

errors = 0
schemas = [pathlib.Path(p) for p in sys.argv[1:]]
for sp in schemas:
    try:
        sch = json.loads(sp.read_text(encoding="utf-8"))
        Draft202012Validator.check_schema(sch)
        print(f"Schema OK: {sp}")
    except Exception as e:
        print(f"::error file={sp}::Schema invalid: {e}")
        errors += 1
sys.exit(errors)
PY
          "${SCHEMAS[@]}"

      # ---------- Auto-discover & validate any JSON with $schema ----------
      - name: Validate files that declare $schema
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          python - <<'PY'
import os, sys, json, pathlib, urllib.parse
from jsonschema import Draft202012Validator
from jsonschema.exceptions import ValidationError

def load_json(p: pathlib.Path):
    return json.loads(p.read_text(encoding="utf-8"))

def resolve_schema_uri(uri: str, base: pathlib.Path):
    parsed = urllib.parse.urlparse(uri)
    if parsed.scheme in ("http", "https"):
        import urllib.request
        with urllib.request.urlopen(uri) as r:
            return json.loads(r.read().decode("utf-8"))
    if parsed.scheme == "file":
        return load_json(pathlib.Path(parsed.path))
    candidate = (base.parent / uri).resolve()
    if candidate.exists():
        return load_json(candidate)
    candidate = pathlib.Path(uri)
    if candidate.exists():
        return load_json(candidate)
    raise FileNotFoundError(f"Schema not found: {uri}")

roots = []
for p in ["web/app.config.json", "web/layers.json"]:
    if pathlib.Path(p).exists():
        roots.append(p)
roots += [str(p) for p in pathlib.Path("web/config").glob("**/*.json")]
roots += [str(p) for p in pathlib.Path("web/data").glob("**/*.json")]

errors = 0
checked = 0
for s in roots:
    p = pathlib.Path(s)
    try:
        data = load_json(p)
    except Exception as e:
        print(f"::error file={p}::Failed to parse JSON: {e}")
        errors += 1
        continue
    schema_uri = data.get("$schema")
    if not schema_uri:
        continue
    try:
        schema = resolve_schema_uri(schema_uri, p)
        Draft202012Validator.check_schema(schema)
        Draft202012Validator(schema).validate(data)
        print(f"Validated with $schema: {p}")
        checked += 1
    except ValidationError as ve:
        print(f"::error file={p}::Schema validation error: {ve.message}")
        errors += 1
    except Exception as e:
        print(f"::error file={p}::Failed validating against {schema_uri}: {e}")
        errors += 1

if checked == 0:
    print("::notice::No JSON files declared $schema; skipping dynamic validation.")
sys.exit(errors)
PY

      # ---------- Legacy explicit validations kept for compatibility ----------
      - name: Schema-validate app.config.json (if schema present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/app.config.json ] && [ -f web/config/app.config.schema.json ]; then
            python - <<'PY'
import json, sys, pathlib
from jsonschema import Draft202012Validator
cfg_p = pathlib.Path("web/app.config.json")
sch_p = pathlib.Path("web/config/app.config.schema.json")
cfg = json.loads(cfg_p.read_text(encoding="utf-8"))
sch = json.loads(sch_p.read_text(encoding="utf-8"))
Draft202012Validator.check_schema(sch)
errs = sorted(Draft202012Validator(sch).iter_errors(cfg), key=lambda e: e.path)
if errs:
    print(f"::error file={cfg_p}::{len(errs)} schema error(s) found")
    for e in errs[:25]:
        path = "/".join(map(str, e.path)) or "(root)"
        print(f"- {path}: {e.message}")
    sys.exit(2)
print("app.config.json ✔ schema-valid")
PY
          else
            echo "::notice::app.config.json or app.config.schema.json missing; skipping schema validation."
          fi

      - name: Schema-validate layers.json (if schema present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/layers.json ] && [ -f web/config/layers.schema.json ]; then
            python - <<'PY'
import json, sys, pathlib
from jsonschema import Draft202012Validator
cfg_p = pathlib.Path("web/layers.json")
sch_p = pathlib.Path("web/config/layers.schema.json")
cfg = json.loads(cfg_p.read_text(encoding="utf-8"))
sch = json.loads(sch_p.read_text(encoding="utf-8"))
Draft202012Validator.check_schema(sch)
errs = sorted(Draft202012Validator(sch).iter_errors(cfg), key=lambda e: e.path)
if errs:
    print(f"::error file={cfg_p}::{len(errs)} schema error(s) found")
    for e in errs[:25]:
        path = "/".join(map(str, e.path)) or "(root)"
        print(f"- {path}: {e.message}")
    sys.exit(2)
print("layers.json ✔ schema-valid")
PY
          else
            echo "::notice::layers.json or layers.schema.json missing; skipping schema validation."
          fi

      # ---------- Pytest targeted run ----------
      - name: Install test deps
        run: |
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e .
          fi

      - name: Run pytest (web config tests)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f tests/test_web_configs.py ]; then
            pytest -q tests/test_web_configs.py --junitxml=pytest-web-configs.xml
          else
            pytest -q -k "web_configs" --junitxml=pytest-web-configs.xml || echo "::notice::No matching tests; continuing."
          fi

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-web-configs-${{ github.run_id }}
          path: pytest-web-configs.xml
          if-no-files-found: warn
          retention-days: 14
