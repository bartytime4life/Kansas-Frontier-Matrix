# .github/workflows/web-config-validate.yml
name: Web Config Validate

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "web/app.config.json"
      - "web/layers.json"
      - "web/config/**/*.json"
      - "tests/test_web_configs.py"
      - ".github/workflows/web-config-validate.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "web/app.config.json"
      - "web/layers.json"
      - "web/config/**/*.json"
      - "tests/test_web_configs.py"
      - ".github/workflows/web-config-validate.yml"

permissions:
  contents: read

concurrency:
  group: web-config-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: JSON & Schema Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Show changed files (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "Changed files (vs ${{ github.base_ref }}):"
          git fetch -q origin "${{ github.base_ref }}" || true
          git --no-pager diff --name-only "origin/${{ github.base_ref }}..." | sed 's/^/ - /' || true

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends jq

      # ---------- Strict JSON syntax ----------
      - name: Validate JSON syntax with jq
        id: jqcheck
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          summary="### JSON syntax check\n"
          had_any=false
          fail=0

          check() {
            local f="$1"
            had_any=true
            if jq -e . "$f" >/dev/null 2>&1; then
              summary+="- ✅ $f\n"
            else
              summary+="- ❌ $f\n"
              echo "::error file=$f::Invalid JSON"
              fail=1
            fi
          }

          for f in web/app.config.json web/layers.json; do
            [ -e "$f" ] && check "$f"
          done
          for f in web/config/**/*.json; do
            [ -e "$f" ] && check "$f"
          done

          if ! $had_any; then
            summary+="(No web config JSON files present)\n"
          fi
          echo -e "$summary" >> "$GITHUB_STEP_SUMMARY"
          exit $fail

      # ---------- Optional schema validation (Python jsonschema) ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install schema tooling
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Schema-validate app.config.json (if schema present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/app.config.json ] && [ -f web/config/app.config.schema.json ]; then
            python - <<'PY'
import json, sys, pathlib
from jsonschema import Draft202012Validator
cfg_p = pathlib.Path("web/app.config.json")
sch_p = pathlib.Path("web/config/app.config.schema.json")
cfg = json.loads(cfg_p.read_text(encoding="utf-8"))
sch = json.loads(sch_p.read_text(encoding="utf-8"))
errs = sorted(Draft202012Validator(sch).iter_errors(cfg), key=lambda e: e.path)
if errs:
    print(f"::error file={cfg_p}::{len(errs)} schema error(s) found")
    for e in errs[:25]:
        print("-", "/".join(map(str, e.path)) or "(root)", ":", e.message)
    sys.exit(2)
print("app.config.json ✔ schema-valid")
PY
          else
            echo "::notice::app.config.json or app.config.schema.json missing; skipping schema validation."
          fi

      - name: Schema-validate layers.json (if schema present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/layers.json ] && [ -f web/config/layers.schema.json ]; then
            python - <<'PY'
import json, sys, pathlib
from jsonschema import Draft202012Validator
cfg_p = pathlib.Path("web/layers.json")
sch_p = pathlib.Path("web/config/layers.schema.json")
cfg = json.loads(cfg_p.read_text(encoding="utf-8"))
sch = json.loads(sch_p.read_text(encoding="utf-8"))
errs = sorted(Draft202012Validator(sch).iter_errors(cfg), key=lambda e: e.path)
if errs:
    print(f"::error file={cfg_p}::{len(errs)} schema error(s) found")
    for e in errs[:25]:
        print("-", "/".join(map(str, e.path)) or "(root)", ":", e.message)
    sys.exit(2)
print("layers.json ✔ schema-valid")
PY
          else
            echo "::notice::layers.json or layers.schema.json missing; skipping schema validation."
          fi

      # ---------- Pytest targeted run ----------
      - name: Install test deps
        run: |
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest

          # If project is installable, add it (expose console_scripts/tests helpers)
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e .
          fi

      - name: Run pytest (web config tests)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f tests/test_web_configs.py ]; then
            pytest -q tests/test_web_configs.py --junitxml=pytest-web-configs.xml
          else
            # Fallback: keyword-based selection
            pytest -q -k "web_configs" --junitxml=pytest-web-configs.xml || echo "::notice::No matching tests; continuing."
          fi

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-web-configs-${{ github.run_id }}
          path: pytest-web-configs.xml
          if-no-files-found: warn
          retention-days: 14