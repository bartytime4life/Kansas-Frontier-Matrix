name: Build & Attach Release Artifacts

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

concurrency:
  group: "release-${{ github.ref }}"
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  DIST_DIR: dist
  EXTRAS_DIR: build/extras
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

jobs:
  build:
    name: Build (sdist+wheel) & validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # keep tags for setuptools_scm / version resolvers

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            constraints.txt
            pyproject.toml

      - name: Install build toolchain
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Optional, "light" checks that avoid pulling heavy GIS deps:
      # - use --no-deps so we don't compile wheels for rasterio/pyproj
      # - import-only checks guarded to skip if imports fail
      - name: Quick smoke (no-deps import guards)
        run: |
          set -euo pipefail
          # Try installing just the package metadata/entrypoints without deps
          pip install -e . --no-deps || true
          python - <<'PY'
          import importlib, sys
          mods = ["kansas_geo_timeline"]
          bad = 0
          for m in mods:
              try:
                  importlib.import_module(m)
                  print(f"[ok] import {m}")
              except Exception as e:
                  print(f"[warn] cannot import {m} without deps: {e}", file=sys.stderr)
          PY
          # STAC sanity (no kgt required)
          if [ -d stac/items ]; then
            python - <<'PY'
            import json, pathlib, sys
            req = ["stac_version","id","type","geometry","bbox","properties","links","assets"]
            bad=0
            for p in sorted(pathlib.Path("stac/items").glob("*.json")):
                try:
                    d=json.loads(p.read_text(encoding="utf-8"))
                except Exception as e:
                    print(f"::error file={p}::JSON parse error: {e}")
                    bad += 1; continue
                miss=[k for k in req if k not in d]
                if miss or d.get("type")!="Feature":
                    print(f"::error file={p}::missing {miss} or wrong type")
                    bad += 1
            sys.exit(1 if bad else 0)
            PY
          fi

      - name: Build sdist & wheel
        run: |
          python -m build
          ls -lh ${{ env.DIST_DIR }}/

      - name: Twine check
        run: python -m twine check ${{ env.DIST_DIR }}/*

      - name: Bundle extras (optional)
        run: |
          set -euo pipefail
          mkdir -p "${EXTRAS_DIR}"
          if [ -d stac ]; then
            (cd stac && zip -qr "../${EXTRAS_DIR}/stac_snapshot.zip" .)
          fi
          if [ -d web ]; then
            (cd web && zip -qr "../${EXTRAS_DIR}/web_snapshot.zip" .)
          fi
          # prune empty extras dir
          [ -z "$(ls -A "${EXTRAS_DIR}" 2>/dev/null || true)" ] && rmdir "${EXTRAS_DIR}" || true

      - name: Checksums (SHA-256)
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Dist files
          for f in "${DIST_DIR}"/*; do
            [ -e "$f" ] || continue
            sha256sum "$f" | tee "$f.sha256"
          done
          # Optional extras
          if [ -d "${EXTRAS_DIR}" ]; then
            for f in "${EXTRAS_DIR}"/*.zip; do
              [ -e "$f" ] || continue
              sha256sum "$f" | tee "$f.sha256"
            done
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            ${{ env.DIST_DIR }}/*
            ${{ env.DIST_DIR }}/*.sha256
            ${{ env.EXTRAS_DIR }}/*.zip
            ${{ env.EXTRAS_DIR }}/*.sha256
          if-no-files-found: warn
          retention-days: 7

      - name: Job summary (hashes)
        run: |
          echo "## Release artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### dist/" >> $GITHUB_STEP_SUMMARY
          ls -lh ${{ env.DIST_DIR }} >> $GITHUB_STEP_SUMMARY
          if [ -d "${EXTRAS_DIR}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ${EXTRAS_DIR}/" >> $GITHUB_STEP_SUMMARY
            ls -lh ${EXTRAS_DIR} >> $GITHUB_STEP_SUMMARY
          fi

  github-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Detect prerelease from tag
        id: prerelease
        run: |
          tag="${GITHUB_REF_NAME}"
          shopt -s nocasematch
          if [[ "$tag" =~ rc|beta|alpha ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
          draft: false
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
