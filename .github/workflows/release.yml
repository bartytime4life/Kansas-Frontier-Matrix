# .github/workflows/release.yml
name: Build & Attach Release Artifacts

on:
  push:
    tags: [ "v*" ]        # tag like v0.3.2
  workflow_dispatch:

permissions:
  contents: write
  id-token: write         # for provenance attestation

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  DIST_DIR: dist
  EXTRAS_DIR: build/extras
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONUTF8: "1"

jobs:
  build:
    name: Build (sdist+wheel) & validate
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # setuptools_scm needs full history + tags
          fetch-depth: 0

      - name: Derive SOURCE_DATE_EPOCH (reproducible builds)
        id: sde
        shell: bash
        run: |
          # Use latest commit time as reproducible timestamp
          echo "epoch=$(git log -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install build toolchain
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools_scm packaging wheel

      # Ensure tag (vX.Y.Zâ€¦) matches version resolved by setuptools_scm
      - name: Verify tag matches project version
        id: tagcheck
        shell: bash
        env:
          SOURCE_DATE_EPOCH: ${{ steps.sde.outputs.epoch }}
        run: |
          set -euo pipefail
          TAG_RAW="${GITHUB_REF_NAME}"
          TAG="${TAG_RAW#v}"  # strip leading 'v'
          PYVER="$(python - <<'PY'
from setuptools_scm import get_version
from packaging.version import Version
print(Version(get_version()).public)
PY
)"
          echo "Git tag: ${TAG_RAW}"
          echo "Resolved version: ${PYVER}"
          if [ "${TAG}" != "${PYVER}" ]; then
            echo "::error::Git tag (${TAG_RAW}) does not match project version (${PYVER})"
            exit 1
          fi
          echo "version=${PYVER}" >> "$GITHUB_OUTPUT"

      - name: Quick smoke (editable, no-deps)
        env:
          SOURCE_DATE_EPOCH: ${{ steps.sde.outputs.epoch }}
        run: |
          set -euo pipefail
          pip install -e . --no-deps || true
          python - <<'PY'
import importlib, sys
mods = ["kansas_geo_timeline"]
for m in mods:
    try:
        importlib.import_module(m)
        print(f"[ok] import {m} (editable, no-deps)")
    except Exception as e:
        print(f"[warn] cannot import {m} without deps: {e}", file=sys.stderr)
PY

      - name: Build sdist & wheel
        env:
          SOURCE_DATE_EPOCH: ${{ steps.sde.outputs.epoch }}
        run: |
          python -m build
          ls -lh "${{ env.DIST_DIR }}/"

      - name: Twine check
        run: python -m twine check ${{ env.DIST_DIR }}/*

      # Verify sdist installs & imports when built into a wheel
      - name: Install built wheel and smoke-import
        shell: bash
        run: |
          set -euo pipefail
          WHL="$(ls -1 ${DIST_DIR}/*.whl | head -n1)"
          echo "Installing wheel: ${WHL}"
          python -m pip install --force-reinstall --no-deps "${WHL}"
          python - <<'PY'
import importlib
for m in ("kansas_geo_timeline",):
    importlib.import_module(m)
    print(f"[ok] import {m} from wheel")
PY

      # Optional: build the web app and capture a release snapshot
      - name: Build web (optional)
        id: webbuild
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/package.json ]; then
            pushd web >/dev/null
            if [ -f pnpm-lock.yaml ]; then
              npm i -g pnpm@9
              pnpm install --frozen-lockfile
              if pnpm run | grep -qE '^ *build( |:|$)'; then pnpm build || true; fi
            elif [ -f yarn.lock ]; then
              corepack enable
              yarn install --frozen-lockfile
              if yarn run | grep -qE '^ *build( |:|$)'; then yarn build || true; fi
            else
              if [ -f package-lock.json ]; then npm ci; else npm install; fi
              if npm run | grep -qE '^ *build( |:|$)'; then npm run build || true; fi
            fi
            popd >/dev/null
            echo "built=true" >> "$GITHUB_OUTPUT"
          else
            echo "built=false" >> "$GITHUB_OUTPUT"

      - name: Bundle extras (STAC/web snapshots)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${EXTRAS_DIR}"
          if [ -d stac ]; then
            (cd stac && zip -qr "../${EXTRAS_DIR}/stac_snapshot.zip" .)
          fi
          # Prefer built output if it exists, else snapshot the web folder
          if [ "${{ steps.webbuild.outputs.built }}" = "true" ] && [ -d web/dist ]; then
            (cd web/dist && zip -qr "../../${EXTRAS_DIR}/web_build.zip" .)
          elif [ -d web ]; then
            (cd web && zip -qr "../${EXTRAS_DIR}/web_snapshot.zip" .)
          fi
          [ -d "${EXTRAS_DIR}" ] && ls -lh "${EXTRAS_DIR}" || true

      - name: Checksums (SHA-256) + manifest
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Dist files
          for f in "${DIST_DIR}"/*.{whl,tar.gz}; do
            [ -e "$f" ] || continue
            sha256sum "$f" | tee "$f.sha256"
          done
          # Extras
          if [ -d "${EXTRAS_DIR}" ]; then
            for f in "${EXTRAS_DIR}"/*.zip; do
              [ -e "$f" ] || continue
              sha256sum "$f" | tee "$f".sha256
            done
          fi
          {
            echo "# SHA-256 checksums"
            echo
            for f in "${DIST_DIR}"/*.{whl,tar.gz}; do [ -e "$f.sha256" ] && cat "$f.sha256"; done
            if [ -d "${EXTRAS_DIR}" ]; then
              for f in "${EXTRAS_DIR}"/*.sha256; do [ -e "$f" ] && cat "$f"; done
            fi
          } > CHECKSUMS.txt
          ls -lh CHECKSUMS.txt

      # Optional: lightweight SBOMs for the built distributions
      - name: Generate SBOMs (CycloneDX) for dists (optional)
        continue-on-error: true
        run: |
          set -euo pipefail
          python -m pip install --upgrade cyclonedx-bom || exit 0
          for f in "${DIST_DIR}"/*.{whl,tar.gz}; do
            [ -e "$f" ] || continue
            cyclonedx-bom -o "${f}.cdx.json" -e "$f" || true
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            ${{ env.DIST_DIR }}/*.whl
            ${{ env.DIST_DIR }}/*.tar.gz
            ${{ env.DIST_DIR }}/*.sha256
            ${{ env.DIST_DIR }}/*.cdx.json
            ${{ env.EXTRAS_DIR }}/*.zip
            ${{ env.EXTRAS_DIR }}/*.sha256
            CHECKSUMS.txt
          if-no-files-found: warn
          retention-days: 21

      - name: Job summary
        run: |
          {
            echo "## Release artifacts"
            echo
            echo "### dist/"
            ls -lh ${{ env.DIST_DIR }} || true
            if [ -d "${EXTRAS_DIR}" ]; then
              echo
              echo "### ${EXTRAS_DIR}/"
              ls -lh ${EXTRAS_DIR} || true
            fi
            echo
            echo "### Checksums"
            echo '```'
            sed -n '1,200p' CHECKSUMS.txt
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Attest build provenance (artifacts)
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            ${{ env.DIST_DIR }}/*.whl
            ${{ env.DIST_DIR }}/*.tar.gz
            ${{ env.EXTRAS_DIR }}/*.zip
            CHECKSUMS.txt

  github-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Verify artifacts exist
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          cnt=$(find dist -type f | wc -l | tr -d ' ')
          if [ "$cnt" = "0" ]; then
            echo "::error::No release artifacts found in dist/"
            exit 1
          fi
          echo "Found $cnt artifact(s) in dist/"

      - name: Detect prerelease from tag
        id: prerelease
        run: |
          tag="${GITHUB_REF_NAME}"
          shopt -s nocasematch
          if [[ "$tag" =~ rc|beta|alpha|a|b|dev|post ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
          draft: false
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          generate_release_notes: true
          body_path: dist/CHECKSUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
