# .github/workflows/tests.yml
name: Tests

on:
  push:
    branches: [ main ]
    paths:
      - "tests/**"
      - "stac/**"
      - "web/**"
      - "data/**"
      - "scripts/**"
      - "pyproject.toml"
      - "requirements.txt"
      - "requirements-dev.txt"
      - ".github/workflows/tests.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "tests/**"
      - "stac/**"
      - "web/**"
      - "data/**"
      - "scripts/**"
      - "pyproject.toml"
      - "requirements.txt"
      - "requirements-dev.txt"
      - ".github/workflows/tests.yml"
  workflow_dispatch:

# Prevent overlapping runs on the same ref and follow least-privilege defaults
concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  pytest:
    name: Pytest (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # Optional native deps that commonly show up in geo/ETL stacks; harmless if unused
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gdal-bin libgdal-dev \
            libspatialindex-dev jq \
            libsqlite3-mod-spatialite
          gdalinfo --version || true

      - name: Cache pip (fallback to explicit cache for robustness)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        env:
          # Help wheels find GDAL headers if building (usually wheels are prebuilt)
          CPLUS_INCLUDE_PATH: /usr/include/gdal
          C_INCLUDE_PATH: /usr/include/gdal
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # Minimal deps for test discovery
            pip install -q pytest jsonschema
          fi
          python - <<'PY'
          import pytest, sys
          print("Python:", sys.version.split()[0])
          print("pytest:", pytest.__version__)
          PY

      - name: Run pytest
        run: |
          set -euo pipefail
          mkdir -p .artifacts
          # Respect repo markers; produce JUnit report for CI visibility
          pytest -q --maxfail=1 --disable-warnings \
                 --junitxml=.artifacts/pytest-report.xml

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report-py${{ matrix.python-version }}-${{ github.run_id }}
          path: .artifacts/pytest-report.xml
          if-no-files-found: warn
          retention-days: 14

  web:
    name: Web (Node tests)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Only run if a web package.json exists
    if: hashFiles('web/package.json') != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install web deps
        working-directory: web
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run web tests (if defined)
        working-directory: web
        run: |
          if npm run | grep -qE ' test($|:)'; then
            npm test --silent || npm test
          else
            echo "No web test script defined; skipping."
          fi
