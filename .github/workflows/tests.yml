# .github/workflows/tests.yml
name: Tests

on:
  push:
    branches: [ main ]
    paths:
      - "tests/**"
      - "stac/**"
      - "web/**"
      - "data/**"
      - "scripts/**"
      - "src/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/tests.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "tests/**"
      - "stac/**"
      - "web/**"
      - "data/**"
      - "scripts/**"
      - "src/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/tests.yml"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff / black autodetect)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Install linters (as needed)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ] && grep -qE '^\[tool\.ruff\]' pyproject.toml; then
            pip install ruff
          elif [ -f ruff.toml ] || [ -f .ruff.toml ]; then
            pip install ruff
          fi
          if [ -f pyproject.toml ] && grep -qE '^\[tool\.black\]' pyproject.toml; then
            pip install black
          elif [ -f pyproject.toml ]; then
            # many repos still use black without explicit tool block
            pip install black
          fi

      - name: Ruff (if installed)
        shell: bash
        run: |
          set -euo pipefail
          if python - <<'PY' 2>/dev/null; then
import importlib; importlib.import_module('ruff'); print('ok')
PY
          then
            echo "::group::ruff check"
            ruff --version
            ruff check .
            echo "::endgroup::"
          else
            echo "No ruff config; skipping."
          fi

      - name: Black --check (if installed)
        shell: bash
        run: |
          set -euo pipefail
          if python - <<'PY' 2>/dev/null; then
import importlib; importlib.import_module('black'); print('ok')
PY
          then
            echo "::group::black --check"
            black --version
            black --check .
            echo "::endgroup::"
          else
            echo "No black detected; skipping."
          fi

  typecheck:
    name: Type-check (mypy autodetect)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Install mypy (if configured)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          need=false
          if [ -f pyproject.toml ] && grep -qE '^\[tool\.mypy\]' pyproject.toml; then need=true; fi
          if [ -f mypy.ini ]; then need=true; fi
          if [ -f setup.cfg ] && grep -q '^\[mypy\]' setup.cfg; then need=true; fi
          if $need; then
            pip install mypy
          else
            echo "No mypy configuration detected; skipping install."
          fi

      - name: Run mypy (if installed)
        shell: bash
        run: |
          set -euo pipefail
          if python - <<'PY' 2>/dev/null; then
import importlib; importlib.import_module('mypy'); print('ok')
PY
          then
            mypy --version
            TARGETS=""
            [ -d src ] && TARGETS="$TARGETS src"
            [ -d tests ] && TARGETS="$TARGETS tests"
            [ -d scripts ] && TARGETS="$TARGETS scripts"
            [ -z "$TARGETS" ] && TARGETS="."
            mypy $TARGETS
          else
            echo "mypy not installed; skipping."
          fi

  pytest:
    name: Pytest (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    env:
      PYTHONUNBUFFERED: "1"
      CPLUS_INCLUDE_PATH: /usr/include/gdal
      C_INCLUDE_PATH: /usr/include/gdal
      PROJ_LIB: /usr/share/proj
      PROJ_NETWORK: "OFF"   # hermetic tests when pyproj is present

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: (Conditional) Install geo system deps
        id: need_geo
        shell: bash
        run: |
          set -euo pipefail
          need=false
          for f in requirements*.txt pyproject.toml; do
            [ -f "$f" ] || continue
            if grep -Eiq '(gdal|rasterio|geopandas|fiona|pyproj|rtree|spatialite|shapely)' "$f"; then
              need=true; break
            fi
          done
          echo "need=$need" >> "$GITHUB_OUTPUT"
          sudo apt-get update -y
          if $need; then
            sudo apt-get install -y --no-install-recommends \
              gdal-bin libgdal-dev libspatialindex-dev libsqlite3-mod-spatialite jq
            gdalinfo --version || true
            ogrinfo --version || true
          else
            sudo apt-get install -y --no-install-recommends jq
          fi

      - name: Install Python dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Core test deps
          pip install pytest jsonschema pytest-cov || pip install pytest jsonschema
          # Install project (prefer dev extras)
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e .
          fi
          python - <<'PY'
import sys, importlib
print("Python:", sys.version.split()[0])
try:
    import pytest; print("pytest:", pytest.__version__)
except Exception as e:
    print("pytest: not found", e)
PY

      - name: Run pytest (auto-coverage if available)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .artifacts
          if python - <<'PY' 2>/dev/null; then
import importlib; importlib.import_module('pytest_cov'); print('ok')
PY
          then
            pytest -q --maxfail=1 --disable-warnings \
              --cov=. --cov-report=xml:.artifacts/coverage.xml \
              --junitxml=.artifacts/pytest-report.xml
          else
            pytest -q --maxfail=1 --disable-warnings \
              --junitxml=.artifacts/pytest-report.xml
          fi
          {
            echo "### Pytest (py ${{ matrix.python-version }})"
            if [ -f .artifacts/coverage.xml ]; then
              echo "- Coverage: generated"
            else
              echo "- Coverage: n/a"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-py${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            .artifacts/pytest-report.xml
            .artifacts/coverage.xml
          if-no-files-found: warn
          retention-days: 14

  web:
    name: Web (tests + build)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ hashFiles('web/package.json') != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/pnpm-lock.yaml ]; then
            echo "pm=pnpm" >> "$GITHUB_OUTPUT"
            echo "lock=web/pnpm-lock.yaml" >> "$GITHUB_OUTPUT"
          elif [ -f web/yarn.lock ]; then
            echo "pm=yarn" >> "$GITHUB_OUTPUT"
            echo "lock=web/yarn.lock" >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "lock=web/package-lock.json" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ steps.pm.outputs.lock }}

      - name: Install deps
        working-directory: web
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm@9
            pnpm install --frozen-lockfile
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
          fi

      - name: Run web tests (if defined)
        working-directory: web
        shell: bash
        run: |
          set -euo pipefail
          if npm run | grep -qE '^ *test( |:|$)'; then
            npm test --silent || npm test
          else
            echo "No test script; skipping."
          fi

      - name: Build web (if script exists)
        working-directory: web
        shell: bash
        run: |
          set -euo pipefail
          if npm run | grep -qE '^ *build( |:|$)'; then
            npm run build
            {
              echo "### Web (Node)"
              echo "- Built successfully"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No build script; skipping."
          fi
