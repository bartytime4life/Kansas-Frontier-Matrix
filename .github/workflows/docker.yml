# .github/workflows/docker.yml
name: Docker Build & Publish

on:
  push:
    branches: [ main ]
    paths:
      - "Dockerfile"
      - "docker/Dockerfile"
      - "docker/**"
      - ".github/workflows/docker.yml"
      - "pyproject.toml"
      - "package.json"
      - "requirements*.txt"
      - "web/**"
      - "stac/**"
  pull_request:
    paths:
      - "Dockerfile"
      - "docker/Dockerfile"
      - "docker/**"
      - ".github/workflows/docker.yml"
  workflow_dispatch:

# Needed for GHCR push and provenance/SBOM
permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write   # for SARIF (Trivy)

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}   # e.g. ghcr.io/owner/repo
  # Default platforms; change if you only want amd64
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build:
    name: Build${{ github.event_name == 'pull_request' && ' (no push)' || '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Dockerfile & context
        id: path
        shell: bash
        run: |
          set -euo pipefail
          if [ -f Dockerfile ]; then
            echo "dockerfile=Dockerfile" >> "$GITHUB_OUTPUT"
            echo "context=."           >> "$GITHUB_OUTPUT"
          elif [ -f docker/Dockerfile ]; then
            echo "dockerfile=docker/Dockerfile" >> "$GITHUB_OUTPUT"
            echo "context=."                   >> "$GITHUB_OUTPUT"
          else
            echo "::error::No Dockerfile found at ./Dockerfile or ./docker/Dockerfile"
            exit 1
          fi
          echo "Using Dockerfile=${{ steps.path.outputs.dockerfile }}"

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate tags/labels from git context
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/main' }},suffix=-edge
            type=sha,enable=${{ github.ref == 'refs/heads/main' }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            # latest only on full semver tags (vX.Y.Z)
            type=raw,value=latest,enable=${{ startsWith(github.ref,'refs/tags/v') }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.description=Kansas-Frontier-Matrix container image
            org.opencontainers.image.licenses=MIT

      - name: Build (and push if not PR)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.path.outputs.context }}
          file: ${{ steps.path.outputs.dockerfile }}
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          provenance: true          # SLSA provenance
          sbom: true                # generate attested SBOM
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            # Add any build args your Dockerfile honors, e.g.:
            # APP_ENV=production

      - name: Summary
        shell: bash
        run: |
          echo "## Docker build" >> "$GITHUB_STEP_SUMMARY"
          echo "- Registry: \`${{ env.REGISTRY }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Pushed: **$([[ '${{ github.event_name }}' == 'pull_request' ]] && echo 'no' || echo 'yes')**" >> "$GITHUB_STEP_SUMMARY"
          echo "- Tags:" >> "$GITHUB_STEP_SUMMARY"
          printf '%s\n' "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /' >> "$GITHUB_STEP_SUMMARY"

  scan:
    name: Trivy scan (image)
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'   # only scan pushed images
    timeout-minutes: 20
    steps:
      - name: Prepare image ref
        id: ref
        shell: bash
        run: |
          set -euo pipefail
          # Prefer an immutable ref (sha tag) if available; fallback to edge/latest
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            # On tags, use the semver tag
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            # On main, use the sha tag from metadata action's output (second tag typically is sha)
            # If metadata not available here, derive sha tag:
            echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi
          echo "Using image: ${{ steps.ref.outputs.image }}"

      - name: Trivy scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.ref.outputs.image }}
          format: sarif
          output: trivy-image.sarif
          severity: CRITICAL,HIGH
          vuln-type: os,library
          ignore-unfixed: true
          timeout: 10m

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-docker