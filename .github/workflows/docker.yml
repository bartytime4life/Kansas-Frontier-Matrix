# .github/workflows/docker.yml
name: Docker Build & Publish

on:
  push:
    branches: [ main ]
    paths:
      - "Dockerfile"
      - "docker/Dockerfile"
      - "docker/**"
      - ".github/workflows/docker.yml"
      - "pyproject.toml"
      - "package.json"
      - "requirements*.txt"
      - "web/**"
      - "stac/**"
    tags:
      - "v*"                     # build on version tags
  pull_request:
    paths:
      - "Dockerfile"
      - "docker/Dockerfile"
      - "docker/**"
      - ".github/workflows/docker.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write   # for Trivy SARIF upload

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}              # ghcr.io/owner/repo
  PLATFORMS: linux/amd64,linux/arm64                # PRs override to amd64
  # Helpful for reproducibility if your Dockerfile uses it
  SOURCE_DATE_EPOCH: "1704067200"

jobs:
  build:
    name: Build${{ github.event_name == 'pull_request' && ' (PR, no push)' || '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write    # needed only when pushing (non-PR)
      id-token: write    # for provenance attestations
    outputs:
      image-ref: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
      pushed: ${{ steps.build.outputs.pushed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Dockerfile & context
        id: path
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f Dockerfile ]]; then
            echo "dockerfile=Dockerfile" >> "$GITHUB_OUTPUT"
            echo "context=."            >> "$GITHUB_OUTPUT"
          elif [[ -f docker/Dockerfile ]]; then
            echo "dockerfile=docker/Dockerfile" >> "$GITHUB_OUTPUT"
            # If your Dockerfile expects context at repo root, keep "."; otherwise change to "docker"
            echo "context=." >> "$GITHUB_OUTPUT"
          else
            echo "::error::No Dockerfile at ./Dockerfile or ./docker/Dockerfile"
            exit 1
          fi

      - name: Hadolint (Dockerfile lint)
        uses: hadolint/hadolint-action@v3.1.0
        continue-on-error: true
        with:
          dockerfile: ${{ steps.path.outputs.dockerfile }}

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build tags/labels
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # main branch â†’ edge & SHA
            type=ref,event=branch,enable=${{ github.ref == 'refs/heads/main' }},suffix=-edge
            type=sha,enable=${{ github.ref == 'refs/heads/main' }}
            # release tags (vX[.Y[.Z]])
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref,'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref,'refs/tags/v') }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Kansas-Frontier-Matrix container image
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Compute build settings
        id: cfg
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "platforms=linux/amd64" >> "$GITHUB_OUTPUT"
            echo "push=false"            >> "$GITHUB_OUTPUT"
            echo "load=true"             >> "$GITHUB_OUTPUT"
          else
            echo "platforms=${{ env.PLATFORMS }}" >> "$GITHUB_OUTPUT"
            echo "push=true"                       >> "$GITHUB_OUTPUT"
            echo "load=false"                      >> "$GITHUB_OUTPUT"
          fi

      - name: Build (and push if not PR)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.path.outputs.context }}
          file: ${{ steps.path.outputs.dockerfile }}
          platforms: ${{ steps.cfg.outputs.platforms }}
          push: ${{ steps.cfg.outputs.push }}
          load: ${{ steps.cfg.outputs.load }}
          provenance: true            # SLSA provenance attestations
          sbom: true                  # attested SBOM
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SOURCE_DATE_EPOCH=${{ env.SOURCE_DATE_EPOCH }}

      - name: Summary
        shell: bash
        run: |
          {
            echo "## Docker build"
            echo "- Registry: \`${{ env.REGISTRY }}\`"
            echo "- Platforms: \`${{ steps.cfg.outputs.platforms }}\`"
            echo "- Pushed: **${{ steps.cfg.outputs.push }}**"
            echo "- Digest: \`${{ steps.build.outputs.digest || 'n/a (PR load)' }}\`"
            echo "- Tags:"
            printf '%s\n' "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
          } >> "$GITHUB_STEP_SUMMARY"

  scan:
    name: Trivy scan (image, SHA-pinned)
    needs: build
    if: needs.build.outputs.pushed == 'true'   # only scan pushed multi-arch images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Compose image@digest ref
        id: ref
        shell: bash
        run: |
          set -euo pipefail
          DIGEST="${{ needs.build.outputs.digest }}"
          if [[ -z "$DIGEST" ]]; then
            echo "::error::No image digest available from build job"
            exit 1
          fi
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${DIGEST}" >> "$GITHUB_OUTPUT"

      - name: Trivy scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.ref.outputs.image }}
          format: sarif
          output: trivy-image.sarif
          severity: CRITICAL,HIGH
          vuln-type: os,library
          ignore-unfixed: true
          timeout: 10m

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-docker

  # Optional: image signing (cosign). Uncomment to enable.
  # sign:
  #   name: Cosign sign
  #   needs: build
  #   if: needs.build.outputs.pushed == 'true'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #     packages: write
  #   steps:
  #     - uses: sigstore/cosign-installer@v3
  #     - name: Sign image (keyless)
  #       env:
  #         COSIGN_EXPERIMENTAL: "true"
  #       run: |
  #         cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.digest }}
