name: docker-build

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
    paths:
      - "docker/**"
      - "docker-compose.yml"
      - "requirements.txt"
      - "constraints.txt"
      - "pyproject.toml"
      - "src/**"
      - "stac/**"
      - "Makefile"
      - ".github/workflows/docker.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "docker/**"
      - "docker-compose.yml"
      - "requirements.txt"
      - "constraints.txt"
      - "pyproject.toml"
      - "src/**"
      - "stac/**"
      - "Makefile"
      - ".github/workflows/docker.yml"
  workflow_dispatch:

env:
  # image name must be lowercase for GHCR
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  DOCKERFILE: docker/Dockerfile
  CONTEXT: .

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (and push on main/tag)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write          # required to push to GHCR
      id-token: write          # for provenance attestations (BuildKit)

    env:
      # Only push on push to default branch or tag (never on PRs)
      SHOULD_PUSH: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')) }}
      # Normalize cache scope for better reuse across ref names
      REF_SCOPE: ${{ github.ref_name }}
      # Default base for your Dockerfile ARG passthrough
      DEFAULT_GDAL_IMAGE: ghcr.io/osgeo/gdal:ubuntu-small-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # metadata-action semver + tags needs full history

      - name: Verify build inputs exist
        run: |
          set -euo pipefail
          test -f "${{ env.DOCKERFILE }}" || { echo "::error::Dockerfile not found at ${{ env.DOCKERFILE }}"; exit 1; }
          test -d "${{ env.CONTEXT }}" || { echo "::error::Build context not found at ${{ env.CONTEXT }}"; exit 1; }

      - name: Lowercase image name
        id: img
        run: |
          set -euo pipefail
          echo "name=${IMAGE_NAME,,}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      # Login only when we intend to push (never on PRs from forks or branch builds)
      - name: Login to GHCR
        if: ${{ env.SHOULD_PUSH == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Produce tags/labels from branch, tag, and SHA
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.img.outputs.name }}
          # Add `latest` on default branch, semver tags on tag pushes, branch & sha always
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}?tab=readme-ov-file
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp || github.run_started_at }}
            org.opencontainers.image.title=kansas-geo-timeline
            org.opencontainers.image.description=Time · Terrain · History mapping system for Kansas (Earth + Web)
            org.opencontainers.image.licenses=MIT

      # Optional: build a wheel/sdist first and pass as context artifacts (speed up pip install in image)
      # - name: Build Python dist (optional)
      #   run: |
      #     python -m pip install --upgrade build
      #     python -m build
      #     ls -l dist/

      # Build for PRs; Build & Push for main/tags
      - name: Build (PR) / Build & Push (main/tag)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: ${{ env.SHOULD_PUSH == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # BuildKit cache: scoped by repo+ref for better reuse and isolation
          cache-from: type=gha,scope=${{ env.REF_SCOPE }}
          cache-to: type=gha,mode=max,scope=${{ env.REF_SCOPE }}
          # Build args your Dockerfile can consume
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            GDAL_IMAGE=${{ env.DEFAULT_GDAL_IMAGE }}
          # Supply SBOM + provenance (BuildKit native)
          provenance: mode=max
          sbom: true

      # Optional: attest after push (separate attestation subject)
      - name: Attest (provenance+sbom)
        if: ${{ steps.build.outputs.digest && env.SHOULD_PUSH == 'true' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.img.outputs.name }}@${{ steps.build.outputs.digest }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  # Optional: docker-compose build for integration smoke (disabled by default)
  compose:
    if: ${{ false }}  # flip to true to enable
    name: Compose build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - run: docker compose build --progress plain
