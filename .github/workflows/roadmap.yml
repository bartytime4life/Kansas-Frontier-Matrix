# .github/workflows/roadmap.yml
name: Sync Roadmap â†’ Issues & Milestones

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Parse roadmap and simulate changes (no writes)"
        type: boolean
        default: false
  push:
    branches: [ main ]
    paths:
      - ".github/roadmap/**"
      - "scripts/sync-roadmap.js"
      - "package.json"
      - "package-lock.json"
      - "pnpm-lock.yaml"
      - "yarn.lock"
      - ".github/workflows/roadmap.yml"
  pull_request:
    branches: [ main ]
    paths:
      - ".github/roadmap/**"
      - "scripts/sync-roadmap.js"
      - "package.json"
      - "package-lock.json"
      - "pnpm-lock.yaml"
      - "yarn.lock"
      - ".github/workflows/roadmap.yml"

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # If your Node project lives in a subfolder (e.g., tools/roadmap-sync), set this accordingly.
  ROADMAP_WORKDIR: .
  NODE_VERSION: "20"
  ROADMAP_FILE: ".github/roadmap/roadmap.yaml"
  ROADMAP_SCHEMA: ".github/roadmap/schema.json"   # optional; enforced only if present

jobs:
  sync:
    name: Parse & Sync Roadmap
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # PRs => DRY; workflow_dispatch uses input; push to main => APPLY
      - name: Compute DRY_RUN mode
        id: mode
        shell: bash
        run: |
          set -euo pipefail
          DRY=false
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            DRY=true
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DRY=${{ inputs.dry_run && 'true' || 'false' }}
          fi
          echo "dry_run=$DRY" >> "$GITHUB_OUTPUT"
          echo "DRY_RUN=$DRY"  >> "$GITHUB_ENV"
          echo "event=${{ github.event_name }}" >> "$GITHUB_OUTPUT"

      - name: Verify roadmap files exist
        shell: bash
        run: |
          set -euo pipefail
          test -f "$ROADMAP_FILE" || { echo "::error::$ROADMAP_FILE not found"; exit 1; }
          test -f "${{ env.ROADMAP_WORKDIR }}/scripts/sync-roadmap.js" || { echo "::error::scripts/sync-roadmap.js not found in ${{ env.ROADMAP_WORKDIR }}"; exit 1; }
          test -f "${{ env.ROADMAP_WORKDIR }}/package.json" || { echo "::error::package.json not found in ${{ env.ROADMAP_WORKDIR }}"; exit 1; }

      - name: Detect package manager
        id: pm
        working-directory: ${{ env.ROADMAP_WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ]; then
            echo "pm=pnpm" >> "$GITHUB_OUTPUT"
            echo "lock=pnpm-lock.yaml" >> "$GITHUB_OUTPUT"
          elif [ -f yarn.lock ]; then
            echo "pm=yarn" >> "$GITHUB_OUTPUT"
            echo "lock=yarn.lock" >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "lock=package-lock.json" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ env.ROADMAP_WORKDIR }}/${{ steps.pm.outputs.lock }}

      - name: Install deps
        working-directory: ${{ env.ROADMAP_WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.pm.outputs.pm }}" in
            pnpm)
              npm i -g pnpm@9
              pnpm install --frozen-lockfile
              ;;
            yarn)
              corepack enable
              yarn install --frozen-lockfile
              ;;
            npm)
              if [ -f package-lock.json ]; then
                npm ci
              else
                echo "::notice::No package-lock.json; creating lockfile then installing."
                npm install --package-lock-only
                npm ci
              fi
              ;;
          esac
          node --version
          npm --version

      - name: Validate roadmap YAML syntax
        shell: bash
        run: |
          set -euo pipefail
          npx --yes yaml-lint "$ROADMAP_FILE" || echo "::notice::yaml-lint reported issues or not installed; continuing."

      - name: Detect schema presence
        id: schema
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "$ROADMAP_SCHEMA" ]; then
            echo "has_schema=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_schema=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Validate roadmap schema (AJV)
        if: steps.schema.outputs.has_schema == 'true'
        shell: bash
        run: |
          set -euo pipefail
          # ajv-cli + formats plugin
          npx --yes ajv-cli@5 add-metas draft2019 | true
          npx --yes ajv-cli@5 validate \
            -s "$ROADMAP_SCHEMA" \
            -d "$ROADMAP_FILE" \
            --all-errors --spec=draft2020 \
            --strict=false || { echo "::error title=Schema validation failed::$ROADMAP_FILE does not conform to $ROADMAP_SCHEMA"; exit 1; }

      - name: Sync roadmap (labels, milestones, issues)
        id: sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          ROADMAP_FILE: ${{ env.ROADMAP_FILE }}
          DRY_RUN: ${{ env.DRY_RUN }}
        working-directory: ${{ env.ROADMAP_WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p build
          echo "Event: ${{ steps.mode.outputs.event }} | DRY_RUN=${DRY_RUN}"
          # The script must honor DRY_RUN=true (no writes).
          # Recommended: print a plan and write JSON summaries under build/.
          node scripts/sync-roadmap.js | tee build/roadmap-sync.log
          # Expose plan presence for summary
          if [ -f build/plan.json ]; then
            echo "has_plan=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_plan=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "## Roadmap sync"
            echo "- Repository: **${{ github.repository }}**"
            echo "- Mode: **${{ env.DRY_RUN == 'true' && 'DRY RUN (no writes)' || 'APPLY' }}**"
            echo "- Roadmap file: \`${{ env.ROADMAP_FILE }}\`"
            echo "- Event: \`${{ github.event_name }}\`"
            echo "- Schema: **${{ steps.schema.outputs.has_schema }}**"
            PLAN="${{ env.ROADMAP_WORKDIR }}/build/plan.json"
            if [ -f "$PLAN" ]; then
              CREATE=$(jq '[.labels.create[], .milestones.create[], .issues.create[]] | length' "$PLAN" 2>/dev/null || echo 0)
              UPDATE=$(jq '[.labels.update[], .milestones.update[], .issues.update[]] | length' "$PLAN" 2>/dev/null || echo 0)
              CLOSE=$(jq '[.issues.close[]] | length' "$PLAN" 2>/dev/null || echo 0)
              echo
              echo "- Planned creates: **${CREATE}** | updates: **${UPDATE}** | closes: **${CLOSE}**"
              echo
              echo "### Plan (truncated)"
              echo '```json'
              head -c 20000 "$PLAN" || true
              echo
              echo '```'
            fi
            echo "<details><summary>Log tail</summary>"
            echo
            tail -n 120 "${{ env.ROADMAP_WORKDIR }}/build/roadmap-sync.log" || echo "(no log)"
            echo
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload logs & plan (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: roadmap-sync-${{ github.run_id }}
          path: |
            ${{ env.ROADMAP_WORKDIR }}/build/roadmap-sync.log
            ${{ env.ROADMAP_WORKDIR }}/build/plan.json
          if-no-files-found: warn
          retention-days: 14
