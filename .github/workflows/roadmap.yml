# .github/workflows/roadmap.yml
name: Sync Roadmap → Issues & Milestones

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Parse roadmap and simulate changes (no writes)"
        type: boolean
        default: false
  push:
    branches: [ main ]
    paths:
      - ".github/roadmap/**"
      - "scripts/sync-roadmap.js"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/roadmap.yml"
  pull_request:
    branches: [ main ]
    paths:
      - ".github/roadmap/**"
      - "scripts/sync-roadmap.js"
      - "package.json"
      - "package-lock.json"
      - ".github/workflows/roadmap.yml"

permissions:
  contents: read
  metadata: read
  issues: write
  pull-requests: write

concurrency:
  group: roadmap-sync-${{ github.ref }}
  cancel-in-progress: true

env:
  # If your Node project lives in a subfolder (e.g., tools/roadmap-sync), set this accordingly.
  ROADMAP_WORKDIR: .
  NODE_VERSION: "20"
  ROADMAP_FILE: ".github/roadmap/roadmap.yaml"
  ROADMAP_SCHEMA: ".github/roadmap/schema.json" # optional, if present will be enforced

jobs:
  sync:
    name: Parse & Sync Roadmap
    runs-on: ubuntu-latest

    # Compute DRY_RUN with strong guardrails:
    # - pull_request from forks → always true
    # - pull_request (same-repo) → true
    # - workflow_dispatch → from input
    # - push on main → false
    env:
      DRY_RUN: ${{ github.event_name == 'pull_request'
                   && 'true'
                   || (github.event_name == 'workflow_dispatch'
                       && github.event.inputs.dry_run == 'true'
                       && 'true'
                       || 'false') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enforce DRY_RUN for forked PRs
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          # If PR is from a fork, force DRY_RUN to true regardless of earlier logic
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "Forked PR detected → forcing DRY_RUN=true"
            echo "DRY_RUN=true" >> "$GITHUB_ENV"
          fi

      - name: Verify roadmap files exist
        shell: bash
        run: |
          set -euo pipefail
          test -f "$ROADMAP_FILE" || { echo "::error::$ROADMAP_FILE not found"; exit 1; }
          test -f "${{ env.ROADMAP_WORKDIR }}/scripts/sync-roadmap.js" || { echo "::error::scripts/sync-roadmap.js not found in ${{ env.ROADMAP_WORKDIR }}"; exit 1; }
          test -f "${{ env.ROADMAP_WORKDIR }}/package.json" || { echo "::error::package.json not found in ${{ env.ROADMAP_WORKDIR }}"; exit 1; }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.ROADMAP_WORKDIR }}/package-lock.json

      - name: Install deps (npm ci with fallback)
        working-directory: ${{ env.ROADMAP_WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "::notice::No package-lock.json; creating lockfile then installing."
            npm install --package-lock-only
            npm ci
          fi
          node --version
          npm --version

      # Syntax lint for YAML (non-blocking if the tool isn't available locally)
      - name: Validate roadmap YAML syntax
        shell: bash
        run: |
          set -euo pipefail
          npx --yes yaml-lint "$ROADMAP_FILE" || echo "::notice::yaml-lint not strict; semantic validation will follow."

      # Optional JSON Schema validation if schema is present
      - name: Validate roadmap schema (AJV) if schema exists
        if: hashFiles('${{ env.ROADMAP_SCHEMA }}') != ''
        shell: bash
        run: |
          set -euo pipefail
          # ajv-cli with formats support
          npx --yes ajv-cli@5 validate \
            -s "$ROADMAP_SCHEMA" \
            -d "$ROADMAP_FILE" \
            --all-errors --spec=draft2020 \
          || { echo "::error title=Schema validation failed::$ROADMAP_FILE does not conform to $ROADMAP_SCHEMA"; exit 1; }

      - name: Compute mode & context
        id: mode
        shell: bash
        run: |
          echo "event=${{ github.event_name }}" >> "$GITHUB_OUTPUT"
          echo "dry=${{ env.DRY_RUN }}"         >> "$GITHUB_OUTPUT"
          echo "repo=${{ github.repository }}"  >> "$GITHUB_OUTPUT"
          echo "actor=${{ github.actor }}"      >> "$GITHUB_OUTPUT"

      - name: Sync roadmap (labels, milestones, issues)
        id: sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          ROADMAP_FILE: ${{ env.ROADMAP_FILE }}
          DRY_RUN: ${{ env.DRY_RUN }}
        working-directory: ${{ env.ROADMAP_WORKDIR }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p build
          echo "Event: ${{ steps.mode.outputs.event }} | DRY_RUN=${DRY_RUN}"
          # The script must honor DRY_RUN=true (no writes).
          # Recommended behavior: print a plan and write JSON summaries under build/.
          node scripts/sync-roadmap.js | tee build/roadmap-sync.log

      - name: Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## Roadmap sync"
            echo
            echo "- Repository: **${{ github.repository }}**"
            if [ "${{ env.DRY_RUN }}" = "true" ]; then
              echo "- Mode: **DRY RUN** (no writes)"
            else
              echo "- Mode: **APPLY**"
            fi
            echo "- Roadmap file: \`${{ env.ROADMAP_FILE }}\`"
            echo "- Event: \`${{ github.event_name }}\`"
            echo
            if [ -f "${{ env.ROADMAP_WORKDIR }}/build/plan.json" ]; then
              echo "### Plan"
              echo
              echo "\`\`\`json"
              cat "${{ env.ROADMAP_WORKDIR }}/build/plan.json"
              echo "\`\`\`"
              echo
            fi
            echo "<details><summary>Log tail</summary>"
            echo
            tail -n 120 "${{ env.ROADMAP_WORKDIR }}/build/roadmap-sync.log" || echo "(no log)"
            echo
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload logs & plan (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: roadmap-sync-${{ github.run_id }}
          path: |
            ${{ env.ROADMAP_WORKDIR }}/build/roadmap-sync.log
            ${{ env.ROADMAP_WORKDIR }}/build/plan.json
          if-no-files-found: warn
          retention-days: 10

      # Optional: comment the summary on same-repo PRs (forks typically lack write perms)
      # - name: Comment on PR
      #   if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const body = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
      #       await github.rest.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         body
      #       });