name: Build & Deploy Site

on:
  push:
    branches: [ main ]
    paths:
      - "web/**"
      - "stac/**"
      - "data/sources/**"
      - "docs/**"
      - "mkdocs.yml"
      - ".github/workflows/site.yml"
      - "README.md"
      - "Makefile"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    name: Build static site
    runs-on: ubuntu-latest
    env:
      SITE_DIR: _site

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --------------------------------------------------------------
      # Optional: Makefile path (uses your validated targets)
      # --------------------------------------------------------------
      - name: Pre-build via Makefile (stac-validate + site)
        id: prebuild
        run: |
          set -euo pipefail
          if [ -f Makefile ]; then
            echo "has_make=true" >> "$GITHUB_OUTPUT"
            # prefer the combined target if present; fall back to explicit
            if make -qn prebuild >/dev/null 2>&1; then
              make -e prebuild
            else
              make stac-validate || { echo "::error::STAC validation failed"; exit 1; }
              make site || true
            fi
          else
            echo "has_make=false" >> "$GITHUB_OUTPUT"
          fi

      # --------------------------------------------------------------
      # Detect JS tooling if web/package.json exists
      # --------------------------------------------------------------
      - name: Detect web build tooling
        id: detect_tool
        run: |
          set -euo pipefail
          if [ -f web/package.json ]; then
            echo "has_pkgjson=true" >> "$GITHUB_OUTPUT"
            if [ -f web/pnpm-lock.yaml ]; then
              echo "pm=pnpm" >> "$GITHUB_OUTPUT"
            elif [ -f web/yarn.lock ]; then
              echo "pm=yarn" >> "$GITHUB_OUTPUT"
            else
              echo "pm=npm" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "has_pkgjson=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Node (only if building a JS app)
        if: steps.detect_tool.outputs.has_pkgjson == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.detect_tool.outputs.pm }}
          cache-dependency-path: |
            web/package-lock.json
            web/pnpm-lock.yaml
            web/yarn.lock

      - name: Install pnpm (if selected)
        if: steps.detect_tool.outputs.pm == 'pnpm'
        run: npm i -g pnpm@9

      # --------------------------------------------------------------
      # Build web app OR copy static site
      # --------------------------------------------------------------
      - name: Build web (npm)
        if: steps.detect_tool.outputs.pm == 'npm'
        working-directory: web
        run: |
          set -euo pipefail
          npm ci
          npm run build

      - name: Build web (yarn)
        if: steps.detect_tool.outputs.pm == 'yarn'
        working-directory: web
        run: |
          set -euo pipefail
          corepack enable
          yarn install --frozen-lockfile
          yarn build

      - name: Build web (pnpm)
        if: steps.detect_tool.outputs.pm == 'pnpm'
        working-directory: web
        run: |
          set -euo pipefail
          pnpm install --frozen-lockfile
          pnpm build

      - name: Prepare site dir from web build
        if: steps.detect_tool.outputs.has_pkgjson == 'true'
        run: |
          set -euo pipefail
          mkdir -p "$SITE_DIR"
          if [ -d "web/dist" ]; then
            rsync -a --delete web/dist/ "$SITE_DIR"/
          elif [ -d "web/build" ]; then
            rsync -a --delete web/build/ "$SITE_DIR"/
          else
            echo "::error::No dist/ or build/ found after web build"
            exit 1
          fi

      - name: Copy static web/ (when no Node build)
        if: steps.detect_tool.outputs.has_pkgjson != 'true'
        run: |
          set -euo pipefail
          if [ -d "web" ]; then
            mkdir -p "$SITE_DIR"
            rsync -a --delete web/ "$SITE_DIR"/
          else
            echo "::error::No web/ directory and no package.json; nothing to deploy."
            exit 1
          fi

      # --------------------------------------------------------------
      # Fast JSON sanity (STAC & sources) when Makefile isn't used
      # --------------------------------------------------------------
      - name: Validate JSON catalogs (jq quick check)
        if: steps.prebuild.outputs.has_make == 'false'
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
          ok=1
          for dir in stac data/sources; do
            if [ -d "$dir" ]; then
              while IFS= read -r -d '' f; do
                echo "Validating $f"
                jq -e 'type=="object"' "$f" || ok=0
              done < <(find "$dir" -type f -name '*.json' -print0)
            fi
          done
          [ $ok -eq 1 ] || { echo "::error::JSON validation failed"; exit 1; }

      # --------------------------------------------------------------
      # Build MkDocs if present, publish under /docs/
      # --------------------------------------------------------------
      - name: Set up Python (for MkDocs)
        if: ${{ hashFiles('mkdocs.yml') != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build MkDocs site
        if: ${{ hashFiles('mkdocs.yml') != '' }}
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install mkdocs-material
          mkdocs build --clean
          mkdir -p "$SITE_DIR/docs"
          rsync -a --delete site/ "$SITE_DIR/docs/"

      # --------------------------------------------------------------
      # Pages-friendly outputs
      # --------------------------------------------------------------
      - name: Prepare Pages artifacts (.nojekyll, 404, CNAME if present)
        run: |
          set -euo pipefail
          mkdir -p "$SITE_DIR"
          touch "$SITE_DIR/.nojekyll"
          for c in CNAME web/CNAME; do
            if [ -f "$c" ]; then
              cp "$c" "$SITE_DIR/CNAME"
            fi
          done
          if [ ! -f "$SITE_DIR/404.html" ]; then
cat > "$SITE_DIR/404.html" <<'HTML'
<!doctype html><meta charset="utf-8">
<meta name=viewport content="width=device-width,initial-scale=1">
<title>404 — Not Found</title>
<h1>404 — Not Found</h1>
<p>This page does not exist on this site.</p>
HTML
          fi

      # --------------------------------------------------------------
      # Link check (use config if present; otherwise minimal args)
      # --------------------------------------------------------------
      - name: Compute lychee args
        id: lychee_args
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .lychee.toml ]; then
            echo "args=--config .lychee.toml $SITE_DIR" >> "$GITHUB_OUTPUT"
          else
            echo "args=--no-progress --verbose $SITE_DIR" >> "$GITHUB_OUTPUT"
          fi

      - name: Link check (lychee)
        if: ${{ !cancelled() }}
        uses: lycheeverse/lychee-action@v2
        with:
          args: ${{ steps.lychee_args.outputs.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --------------------------------------------------------------
      # Guard: fail early if site dir is empty
      # --------------------------------------------------------------
      - name: Ensure site has files
        run: |
          set -euo pipefail
          if [ -z "$(ls -A "$SITE_DIR" 2>/dev/null)" ]; then
            echo "::error::$SITE_DIR is empty; nothing to deploy."
            exit 1
          fi

      # --------------------------------------------------------------
      # Configure & upload for Pages
      # --------------------------------------------------------------
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}
          retention-days: 7

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
