# .github/workflows/codeql.yml
name: CodeQL

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - "**/*.md"
      - "**/*.png"
      - "**/*.jpg"
      - "**/*.jpeg"
      - "**/*.svg"
      - "docs/**"
      - "data/**"
      - "stac/**"
  pull_request:
    branches: [ main ]
    paths-ignore:
      - "**/*.md"
      - "**/*.png"
      - "**/*.jpg"
      - "**/*.jpeg"
      - "**/*.svg"
      - "docs/**"
      - "data/**"
      - "stac/**"
  schedule:
    - cron: "45 2 * * 0" # Weekly (Sunday 02:45 UTC)

permissions:
  contents: read
  actions: read
  packages: read
  security-events: write # upload SARIF

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        language: [ "javascript-typescript", "python" ]

    steps:
      # Harden egress (set to 'block' to strictly deny)
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false
          persist-credentials: false
          clean: true

      # ---------- Optional local CodeQL config ----------
      - name: Detect local CodeQL config
        id: cfg
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .github/codeql/config.yml ]; then
            echo "path=.github/codeql/config.yml" >> "$GITHUB_OUTPUT"
          elif [ -f .github/codeql.yml ]; then
            echo "path=.github/codeql.yml" >> "$GITHUB_OUTPUT"
          else
            echo "path=" >> "$GITHUB_OUTPUT"
          fi

      # ---------------- JS/TS prep (web/) ----------------
      - name: Detect package manager (web/)
        id: pm
        if: matrix.language == 'javascript-typescript' && hashFiles('web/package.json') != ''
        shell: bash
        run: |
          set -euo pipefail
          if [ -f web/pnpm-lock.yaml ]; then
            echo "pm=pnpm" >> "$GITHUB_OUTPUT"
            echo "lock=web/pnpm-lock.yaml" >> "$GITHUB_OUTPUT"
          elif [ -f web/yarn.lock ]; then
            echo "pm=yarn" >> "$GITHUB_OUTPUT"
            echo "lock=web/yarn.lock" >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "lock=web/package-lock.json" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        if: matrix.language == 'javascript-typescript' && hashFiles('web/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.pm.outputs.pm || 'npm' }}
          cache-dependency-path: ${{ steps.pm.outputs.lock || 'web/package-lock.json' }}

      - name: Install web dependencies
        if: matrix.language == 'javascript-typescript' && hashFiles('web/package.json') != ''
        working-directory: web
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ]; then
            npm i -g pnpm@9
            pnpm install --frozen-lockfile
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
          fi

      # ---------------- Python prep ----------------
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Install Python dependencies (best-effort)
        if: matrix.language == 'python'
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            pip install -e ".[dev]" || pip install -e . || true
          fi

      # ---------------- CodeQL init ----------------
      - name: Initialize CodeQL (local config)
        if: steps.cfg.outputs.path != ''
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality
          config-file: ${{ steps.cfg.outputs.path }}
          build-mode: autobuild

      - name: Initialize CodeQL (inline config)
        if: steps.cfg.outputs.path == ''
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality
          config: |
            paths:
              - src
              - web
              - scripts
            paths-ignore:
              - data
              - stac
              - docs
              - "**/*.min.js"
              - "**/node_modules/**"
          build-mode: autobuild

      # Optional: if autobuild struggles, enable a manual build step
      # - name: Manual build (optional)
      #   if: matrix.language == 'javascript-typescript' && hashFiles('web/package.json') != ''
      #   working-directory: web
      #   run: |
      #     npm run build || yarn build || pnpm build || true

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

      - name: Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## CodeQL"
            echo "- Language: **${{ matrix.language }}**"
            echo "- Event: **${{ github.event_name }}**"
            echo "- Ref: **${{ github.ref }}**"
            echo "- Config: **${{ steps.cfg.outputs.path || 'inline (paths filtered)' }}**"
          } >> "$GITHUB_STEP_SUMMARY"
