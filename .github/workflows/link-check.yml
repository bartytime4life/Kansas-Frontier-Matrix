# .github/workflows/link-check.yml
name: Link Check (docs)

on:
  push:
    branches: [ main ]
    paths:
      - "README.md"
      - "docs/**"
      - "web/**"
      - ".lychee.toml"
      - ".github/workflows/link-check.yml"
  pull_request:
    paths:
      - "README.md"
      - "docs/**"
      - "web/**"
      - ".lychee.toml"
      - ".github/workflows/link-check.yml"
  workflow_dispatch:
  schedule:
    # Weekly sweep (Sunday 04:05 UTC)
    - cron: "5 4 * * 0"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lychee:
    name: Lychee link check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # fetch-depth 0 so we can diff PRs properly (forks included)
          fetch-depth: 0

      # Build args dynamically:
      # - PRs: check only changed Markdown/HTML files (vs merge-base with base branch)
      # - Push/Schedule/Dispatch: scan README + docs + web
      # - If .lychee.toml exists, prefer it (we still pass explicit targets)
      - name: Compute lychee args
        id: args
        shell: bash
        run: |
          set -euo pipefail

          # ----- collect targets (md/html) -----
          collect_targets() {
            local mode="$1"
            local -a files=()

            if [[ "$mode" == "pr" ]]; then
              # Robust merge-base for PRs (works for forks)
              BASE_SHA="${{ github.event.pull_request.base.sha || '' }}"
              if [[ -z "$BASE_SHA" ]]; then
                git fetch -q origin "${{ github.base_ref }}" || true
                BASE_SHA="$(git rev-parse "origin/${{ github.base_ref }}" 2>/dev/null || echo "")"
              fi
              if [[ -n "$BASE_SHA" ]]; then
                MERGE_BASE="$(git merge-base "$BASE_SHA" HEAD 2>/dev/null || echo "")"
              fi
              if [[ -n "$MERGE_BASE" ]]; then
                while IFS= read -r f; do
                  [[ -z "$f" ]] && continue
                  [[ "$f" =~ \.(md|html)$ ]] || continue
                  files+=("$f")
                done < <(git --no-pager diff --name-only "$MERGE_BASE"...HEAD | tr -d '\r')
              else
                mode="full"
              fi
            fi

            if [[ "$mode" != "pr" ]]; then
              [[ -f README.md ]] && files+=("README.md")
              if [[ -d docs ]]; then
                while IFS= read -r -d '' f; do files+=("$f"); done \
                  < <(find docs -type f \( -name '*.md' -o -name '*.html' \) -print0)
              fi
              if [[ -d web ]]; then
                while IFS= read -r -d '' f; do files+=("$f"); done \
                  < <(find web -type f \( -name '*.md' -o -name '*.html' \) -print0)
              fi
            fi

            printf '%s\n' "${files[@]}" | sort -u
          }

          MODE="${{ github.event_name == 'pull_request' && 'pr' || 'full' }}"
          mapfile -t TARGETS < <(collect_targets "$MODE")

          # Avoid no-op: if nothing changed in PR, at least check README
          if [[ ${#TARGETS[@]} -eq 0 ]]; then
            [[ -f README.md ]] && TARGETS=("README.md")
          fi

          # Prefer repo config if present
          if [[ -f .lychee.toml ]]; then
            echo "args=--config .lychee.toml ${TARGETS[*]}" >> "$GITHUB_OUTPUT"
            echo "mode=$MODE" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          mkdir -p lychee

          BASE_ARGS=(
            --no-progress
            --verbose
            --max-retries 3
            --retry-wait-time 2
            --timeout 20
            --max-concurrency 8
            --require-https
            # Accept 429 (rate limits) as non-fatal; still reported in output
            --accept 200,429
          )

          # Emit both JSON and Markdown reports
          OUT_ARGS=(--format json --output lychee/results.json --format markdown --output lychee.md)

          # Reasonable excludes for GIS/tiles/rate-limited APIs
          EXCLUDES=(
            'mailto:*' 'tel:*'
            'http://localhost*' 'http://127.0.0.1*' 'https://localhost*' 'https://127.0.0.1*'
            'https://*.tile.openstreetmap.org/*'
            'https://*.googleapis.com/*'
            'https://*.arcgis.com/*'
            'https://api.mapbox.com/*'
            'https://earthengine.googleapis.com/*'
          )

          ARGS=( "${BASE_ARGS[@]}" "${OUT_ARGS[@]}" )
          for e in "${EXCLUDES[@]}"; do ARGS+=( --exclude "$e" ); done
          # Append targets last (preserves quoting)
          ARGS+=( "${TARGETS[@]}" )

          printf "args=%s\n" "${ARGS[*]}" >> "$GITHUB_OUTPUT"
          echo "mode=$MODE" >> "$GITHUB_OUTPUT"

      - name: Run lychee
        uses: lycheeverse/lychee-action@v2
        with:
          args: ${{ steps.args.outputs.args }}
        env:
          # Token improves rate limits for links to github.com (raw, releases, etc.)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload lychee report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lychee-report-${{ github.run_id }}
          path: |
            lychee.md
            lychee/results.json
          if-no-files-found: warn
          retention-days: 10

      - name: Job Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          TOTAL=0 BAD=0 WARN=0
          if [[ -f lychee/results.json ]]; then
            TOTAL=$(jq 'length' lychee/results.json 2>/dev/null || echo 0)
            # lychee JSON schema: items with "status" not 200 (or accepted) count as failures
            BAD=$(jq '[ .[] | select(.status? and (.status|tonumber? // 0) >= 400) ] | length' lychee/results.json 2>/dev/null || echo 0)
            WARN=$(jq '[ .[] | select(.status? and (.status|tostring) == "429") ] | length' lychee/results.json 2>/dev/null || echo 0)
          fi
          {
            echo "## Link Check (Lychee)"
            echo "- Mode: **${{ steps.args.outputs.mode || 'full' }}**"
            echo "- Checked targets: **$TOTAL** | Errors: **$BAD** | 429s: **$WARN**"
            if [ -f lychee.md ]; then
              echo
              echo "### Report excerpt"
              echo
              echo '```markdown'
              sed -n '1,200p' lychee.md
              echo '```'
            else
              echo
              echo "_No lychee.md report generated (likely using repository .lychee.toml outputs)._"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
