# .github/workflows/secret-scanning.yml
name: "Security â€” Secret Scanning (Gitleaks)"

on:
  push:
    branches: [ "main", "release/*" ]
  pull_request:
    branches: [ "main", "release/*" ]
  schedule:
    - cron: "0 8 * * 1" # Mondays at 08:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # needed to upload SARIF
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  gitleaks:
    name: Gitleaks scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      GITLEAKS_VERSION: "8.18.4"

    steps:
      - name: Checkout (full history for baseline scans)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools (curl, tar, jq)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends curl ca-certificates tar jq

      - name: Restore Gitleaks cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/gitleaks
          key: gitleaks-${{ runner.os }}-${{ env.GITLEAKS_VERSION }}
          restore-keys: |
            gitleaks-${{ runner.os }}-

      # Install Gitleaks (pinned)
      - name: Install Gitleaks
        run: |
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz" \
            | tar xz gitleaks
          sudo mv gitleaks /usr/local/bin/gitleaks
          gitleaks version

      # Decide diff range for PRs to reduce noise/time; fallback to full repo on push/schedule
      - name: Determine scan target
        id: target
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "mode=diff" >> "$GITHUB_OUTPUT"
            echo "base=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
            echo "head=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "mode=repo" >> "$GITHUB_OUTPUT"
          fi

      # Run Gitleaks; respect local config if present (.gitleaks.toml or .gitleaksignore)
      - name: Run Gitleaks (PR diff)
        if: ${{ steps.target.outputs.mode == 'diff' }}
        run: |
          CONFIG_ARG=""
          [[ -f ".gitleaks.toml" ]] && CONFIG_ARG="--config .gitleaks.toml"
          IGNORE_ARG=""
          [[ -f ".gitleaksignore" ]] && IGNORE_ARG="--exclude-from .gitleaksignore"
          # NOTE: Do NOT use --no-git with --log-opts (diff scan needs git history)
          gitleaks detect \
            --verbose \
            --report-format sarif \
            --report-path gitleaks.sarif \
            --redact \
            $CONFIG_ARG $IGNORE_ARG \
            --source . \
            --log-opts "${{ steps.target.outputs.base }}..${{ steps.target.outputs.head }}"
        continue-on-error: true

      - name: Run Gitleaks (full repo)
        if: ${{ steps.target.outputs.mode != 'diff' }}
        run: |
          CONFIG_ARG=""
          [[ -f ".gitleaks.toml" ]] && CONFIG_ARG="--config .gitleaks.toml"
          IGNORE_ARG=""
          [[ -f ".gitleaksignore" ]] && IGNORE_ARG="--exclude-from .gitleaksignore"
          # Full working tree scan (no history): use --no-git for speed
          gitleaks detect \
            --no-git \
            --verbose \
            --report-format sarif \
            --report-path gitleaks.sarif \
            --redact \
            $CONFIG_ARG $IGNORE_ARG \
            --source .
        continue-on-error: true

      # Upload SARIF to Code Scanning so alerts appear under Security tab
      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      # Keep SARIF as an artifact for audit/compliance
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-${{ github.run_id }}
          path: gitleaks.sarif
          if-no-files-found: warn
          retention-days: 14

      # Fail the job if findings exist (based on SARIF results count)
      - name: Fail on findings
        if: always()
        run: |
          if [[ ! -s "gitleaks.sarif" ]]; then
            echo "No SARIF produced; assuming no findings."
            exit 0
          fi
          COUNT=$(jq '[.runs[].results[]] | length' gitleaks.sarif 2>/dev/null || echo 0)
          echo "Gitleaks findings: $COUNT"
          if [[ "$COUNT" -gt 0 ]]; then
            echo "::error::Secrets detected by Gitleaks. See Security > Code scanning alerts."
            exit 1
          fi
