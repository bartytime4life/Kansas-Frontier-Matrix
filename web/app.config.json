/* app.js â€” tiny MapLibre time slider */
(async function () {
  const cfg = await fetch('./app.config.json').then(r => r.json());

  const map = new maplibregl.Map({
    container: 'map',
    style: { version: 8, sources: {}, layers: [] },
    center: [-98.0, 39.0],
    zoom: 6
  });

  const layers = cfg.layers || [];
  const yearEl = document.getElementById('year');
  const labelEl = document.getElementById('year-label');

  function addLayer(l) {
    const id = l.id;
    if (map.getSource(id)) return;

    if (l.type === 'raster') {
      map.addSource(id, { type: 'raster', tiles: [l.url], tileSize: 256 });
      map.addLayer({ id, type: 'raster', source: id, paint: { 'raster-opacity': l.opacity ?? 1 } });
    } else if (l.type === 'image') {
      // static image overlay (if you precomputed bounds)
      // map.addSource(id, { type: 'image', url: l.url, coordinates: l.coordinates });
      // map.addLayer({ id, type: 'raster', source: id, paint: { 'raster-opacity': l.opacity ?? 0.8 } });
    }
  }

  function updateVisibility(y) {
    labelEl.textContent = y;
    layers.forEach(l => {
      addLayer(l);
      const id = l.id;
      const visible = (l.start ?? -9999) <= y && y <= (l.end ?? 9999);
      if (map.getLayer(id)) {
        map.setLayoutProperty(id, 'visibility', visible ? 'visible' : 'none');
      }
    });
  }

  map.on('load', () => {
    layers.forEach(addLayer);
    updateVisibility(parseInt(yearEl.value, 10));
  });

  yearEl.addEventListener('input', () => {
    updateVisibility(parseInt(yearEl.value, 10));
  });
})();
