# --- Paths --------------------------------------------------------------------
SRC="data/raw/ut_pcl/LARNED_1894.jpg"
CFG="data/gcp/LARNED_1894.yml"
WARPED="data/work/georef/LARNED_1894_wgs84.tif"
OUT="data/cogs/overlays/usgs_topo_larned_1894.tif"
PREVIEW="data/cogs/overlays/usgs_topo_larned_1894_preview.png"

mkdir -p "$(dirname "$WARPED")" "$(dirname "$OUT")"

# --- 1) Inject GCPs from YAML into a temp GTiff --------------------------------
# Reads .gcps array from YAML and emits -gcp px py lon lat switches
gdal_translate -of GTiff -a_srs EPSG:4326 \
  $(python - <<'PY'
import sys, yaml
d = yaml.safe_load(open("data/gcp/LARNED_1894.yml"))
for p in d.get("gcps", []):
    sys.stdout.write(f" -gcp {p['px']} {p['py']} {p['lon']} {p['lat']}")
PY
) \
  "$SRC" "/tmp/LARNED_1894_gcps.tif"

# --- 2) Warp (TPS by default; honors neatline if provided in YAML) -------------
CUTLINE_OPT=$(
  python - <<'PY'
import yaml, os
d=yaml.safe_load(open("data/gcp/LARNED_1894.yml"))
cl=d.get("cutline",{}) or {}
if cl.get("use_neatline") and cl.get("neatline_geojson"):
    print(f"-cutline {cl['neatline_geojson']} -crop_to_cutline")
PY
)
gdalwarp -t_srs EPSG:4326 -r cubic -dstalpha -et 0.0 -tps \
  -multi -wo NUM_THREADS=ALL_CPUS \
  $CUTLINE_OPT \
  "/tmp/LARNED_1894_gcps.tif" "$WARPED"

# --- 3) Convert to COG (JPEG/YCBCR; good for scanned RGB maps) -----------------
gdal_translate -of COG \
  -co COMPRESS=JPEG -co QUALITY=85 -co PHOTOMETRIC=YCBCR \
  -co BLOCKSIZE=512 -co NUM_THREADS=ALL_CPUS -co BIGTIFF=IF_SAFER \
  -co OVERVIEW_RESAMPLING=AVERAGE \
  "$WARPED" "$OUT"

# --- 4) Optional: tiny preview + checksum -------------------------------------
gdal_translate -of PNG -outsize 25% 25% "$WARPED" "$PREVIEW" 2>/dev/null || true
( cd "$(dirname "$OUT")" && \
  { command -v sha256sum >/dev/null && sha256sum "$(basename "$OUT")" > "$(basename "$OUT").sha256"; } || \
  { command -v shasum >/dev/null && shasum -a 256 "$(basename "$OUT")" > "$(basename "$OUT").sha256"; } )

echo "âœ… Built $OUT"

