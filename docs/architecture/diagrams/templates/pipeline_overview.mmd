%%----------------------------------------------------------
%% Kansas Frontier Matrix — Pipeline Overview (Enhanced)
%% File: docs/architecture/diagrams/templates/pipeline_overview.mmd
%% Purpose: Visualize complete ETL + AI/ML + Graph + API + Web pipeline lifecycle
%% Author: KFM Documentation Team
%% Version: 2.0.0
%% Date: 2025-11-16
%% License: CC-BY 4.0
%% Commit: <auto-filled-on-export>
%%----------------------------------------------------------
%% Usage Guidelines:
%% - Use quotes for all labels.
%% - Use \n for new lines; keep text short and descriptive.
%% - IDs (A-Z,0-9,_) only; avoid spaces.
%% - End block with <!-- END OF MERMAID --> (required for GitHub/CI render).
%%----------------------------------------------------------

flowchart TD

  %% 0️⃣ External Inputs
  subgraph SRC["🌐 Data Sources\n(scans · rasters · vectors · documents · APIs)"]
    S1["Source A\n(e.g., USGS DEM · LiDAR)"]
    S2["Source B\n(e.g., NOAA Climate · Daymet)"]
    S3["Source C\n(e.g., Kansas GIS Archive · REST)"]
    S4["Source D\n(e.g., Historical Documents · OCR PDFs)"]
  end

  %% 1️⃣ ETL / Processing
  subgraph ETL["⚙️ ETL Pipeline\n(Makefile · Python · Checksums)"]
    FET["Fetch\nscripts/fetch_data.py"]
    TRF["Transform\nreproject · convert · normalize"]
    QA["Validate\nschema · STAC · checksums"]
    OUT["Processed Outputs\nCOG · GeoJSON · CSV/Parquet"]
  end

  %% 2️⃣ Catalog / Metadata
  subgraph CAT["🧩 Catalog & Metadata\n(STAC · DCAT · JSON-LD)"]
    COLL["STAC Collection\nfamily-level metadata"]
    ITEM["STAC Item\nspatial · temporal · asset hrefs"]
    SHA["SHA-256 Checksums\nintegrity sidecars (*.sha256)"]
  end

  %% 3️⃣ AI/ML Enrichment
  subgraph AIML["🧠 AI/ML Enrichment\n(NER · Geocoding · Linking · Summarization)"]
    NER["Entity Extraction\npeople · places · dates · events"]
    GEO["Geoparsing / Geocoding\nGNIS · Gazetteers"]
    LINK["Entity Linking\nfuzzy + context score"]
    SUM["Summarization\nBART/T5 · Optional Inference"]
  end

  %% 4️⃣ Knowledge Graph
  subgraph KG["🕸 Knowledge Graph\n(Neo4j · CIDOC CRM · OWL-Time)"]
    NODE["Nodes\n(Person · Place · Event · Document)"]
    REL["Relationships\n(OCCURRED_AT · MENTIONS · SOURCE_OF)"]
    CONF["Evidence / Confidence\ncross-source corroboration"]
  end

  %% 5️⃣ API Layer
  subgraph API["🔌 API Layer\n(FastAPI · GraphQL · JSON-LD)"]
    REST["REST Endpoints\n/events · /entity · /search · /layers-config"]
    GQL["GraphQL\nentity dossiers · graph traversals"]
    AUTH["Auth\nJWT/cookies · roles (optional)"]
  end

  %% 6️⃣ Publication / UI
  subgraph UI["🌎 Publication & Visualization\n(Web UI · Exports)"]
    WEB["Web UI\nReact · MapLibre · Timeline/Map"]
    EXP["Exports\nKML · KMZ · Downloads (Optional)"]
  end

  %% 7️⃣ Storage / Static Assets
  subgraph FILES["🗄️ Static Assets / Tiles\n(CDN · Tile Server · Object Storage)"]
    COGS["Raster Tiles / COG\nhillshade · DEM · scans"]
    VECT["Vector Data\nGeoJSON · MVT vector tiles"]
  end

  %% 8️⃣ Observability
  subgraph OBS["📊 Observability & Governance\n(CI/CD · Logs · Metrics · Traces)"]
    CI["CI/CD\nlint · tests · STAC validate · security scans"]
    O11Y["Telemetry\nOpenTelemetry · dashboards"]
    POL["Policy-as-Code\nOPA/Conftest · branch protection"]
  end

  %% --- Data Flow Connections ---
  S1 --> FET
  S2 --> FET
  S3 --> FET
  S4 --> FET

  FET --> TRF --> QA --> OUT
  OUT --> COLL
  OUT --> ITEM
  ITEM --> SHA

  %% --- AI/ML & Graph Integration ---
  OUT --> NER
  NER --> GEO --> LINK
  NER --> SUM
  LINK --> NODE
  LINK --> REL
  SUM --> NODE
  NODE --> CONF
  REL --> CONF
  SHA -. "provenance link" .- NODE
  ITEM -. "asset href" .- NODE

  %% --- Metadata → API → UI ---
  COLL --> REST
  ITEM --> REST
  NODE --> REST
  REL --> REST
  CONF --> REST
  REST --> GQL
  AUTH --> REST

  REST -- "JSON / GeoJSON" --> WEB
  REST -- "downloads" --> EXP
  WEB <-- "tiles · COG · GeoJSON" --> FILES
  COGS -. "raster href" .- ITEM
  VECT -. "vector href" .- ITEM

  %% --- Observability & CI/CD ---
  CI --> O11Y
  REST --> O11Y
  WEB --> O11Y
  O11Y --> POL
  CI --> POL

  %% --- Styling (WCAG 2.1 AA Accessible) ---
  classDef layer fill:#f7f7f7,stroke:#333,stroke-width:1px,color:#111;
  classDef src fill:#fafafa,stroke:#444,stroke-width:1px,color:#111;
  classDef etl fill:#e6f2ff,stroke:#31708f,stroke-width:1.2px,color:#111;
  classDef cat fill:#fff8e1,stroke:#8a6d3b,stroke-width:1.2px,color:#111;
  classDef ai fill:#f3e5f5,stroke:#6a1b9a,stroke-width:1.2px,color:#111;
  classDef kg fill:#f9e6ff,stroke:#6b3c76,stroke-width:1.2px,color:#111;
  classDef api fill:#e3f2fd,stroke:#1565c0,stroke-width:1.2px,color:#111;
  classDef ui fill:#e8f5e9,stroke:#2e7d32,stroke-width:1.2px,color:#111;
  classDef files fill:#eceff1,stroke:#546e7a,stroke-width:1px,color:#111;
  classDef obs fill:#ede7f6,stroke:#4527a0,stroke-width:1.2px,color:#111;

  %% Apply Classes
  class SRC src;
  class ETL etl;
  class CAT cat;
  class AIML ai;
  class KG kg;
  class API api;
  class UI ui;
  class FILES files;
  class OBS obs;
  class OUT,COLL,ITEM,SHA data;
  class NODE,REL,CONF kg;

  %% --- Legend (Optional) ---
  %% subgraph LEGEND["Legend (Remove in Production)"]
  %%   L1["⬜ Source / ETL"]:::etl
  %%   L2["🟨 Catalog / Metadata"]:::cat
  %%   L3["🟪 Knowledge Graph"]:::kg
  %%   L4["🟦 API Layer"]:::api
  %%   L5["🟩 Web UI"]:::ui
  %% end

  %% --- Accessibility & Design Tips ---
  %% ✅ Keep label contrast ≥ 4.5:1.
  %% ✅ Use dashed edges for inferred or optional data flows.
  %% ✅ Include provenance notes where relevant.
  %% ✅ Limit line crossings by grouping flows horizontally.
  %% ✅ Use TD (top→down) for long pipelines, LR (left→right) for compact layouts.

<!-- END OF MERMAID -->