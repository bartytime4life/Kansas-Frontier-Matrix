# ================================
# Kansas-Frontier-Matrix / MCP Repo
# .pre-commit-config.yaml  (upgraded)
# ================================

minimum_pre_commit_version: "3.6.0"

ci:
  autofix_prs: true
  autoupdate_schedule: monthly
  skip: []  # run all hooks unless marked "manual"

default_language_version:
  python: python3

# Most hooks run on commit; heavy ones set to [push]/[manual]
default_stages: [commit]

# Skip heavy/binary trees when hooks support "exclude"
exclude: |
  (?x)^(
    data/(processed|cogs|outputs|raw)/|
    data/sources/.*/vectors/|
    assets/(tiles|images|fonts)/|
    web/(dist|build|tiles|assets)/|
    (?:^|.*/)?node_modules/|
    (?:^|.*/)?dist/|
    build/|
    _site/|
    earth/|
    docs/_build/|
    \.venv/|
    \.mypy_cache/|
    \.ruff_cache/|
    \.pytest_cache/|
    .*\.ipynb_checkpoints/|
    .*\.pmtiles$|
    .*\.mbtiles$|
    .*\.tif(f)?$|
    .*\.las$|.*\.laz$|
    .*\.gpkg$|.*\.parquet$|.*\.geoparquet$|
    .*\.zip$|.*\.7z$|.*\.tar(\.gz)?$|.*\.zst$|
    .*\.pdf$
  )

repos:
  # --- Core hygiene ----------------------------------------------------------
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-added-large-files
        args: ["--maxkb=5000"]  # >5MB â‡’ use DVC/LFS
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: end-of-file-fixer
      - id: trailing-whitespace
        args: ["--markdown-linebreak-ext=md,mdx,rst"]
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: debug-statements
      - id: detect-private-key
      - id: detect-aws-credentials
      - id: check-executables-have-shebang
      - id: name-tests-test
      - id: check-symlinks
      - id: check-vcs-permalinks

  # --- Spelling (docs/README safety) ----------------------------------------
  - repo: https://github.com/codespell-project/codespell
    rev: v2.3.0
    hooks:
      - id: codespell
        args:
          - "--ignore-words-list=teh,ot,nd,unkown,adress,fo,hist"
          - "--skip=*.csv,*.geojson,*.jsonl,*.parquet,*.geoparquet,*.gpkg"
        exclude: "(?x)^(assets/|data/|earth/|web/(dist|build)/)"
        stages: [commit]

  # --- Shell / Dockerfile linters -------------------------------------------
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        files: '(^|/)(scripts|docker|\.github)/.*\.sh$'

  - repo: https://github.com/mvdan/sh
    rev: v3.9.0
    hooks:
      - id: shfmt
        args: ["-i", "2", "-ci", "-bn"]
        files: '(^|/)(scripts|docker|\.github)/.*\.sh$'

  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        files: '^docker/(Dockerfile|.*Dockerfile.*)$'

  # --- Ruff (fast lint + format) --------------------------------------------
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        name: ruff (lint)
        args: ["--fix"]
        types_or: [python]
        exclude: ^(notebooks/|docs/)
      - id: ruff-format
        name: ruff (format)
        types_or: [python]
        exclude: ^(notebooks/|docs/)

  # --- Black (kept while migrating fully to ruff-format) ---------------------
  - repo: https://github.com/psf/black
    rev: 24.8.0
    hooks:
      - id: black
        language_version: python3.10
        exclude: ^(notebooks/|docs/)

  # --- YAML / JSON / Markdown / Web assets ----------------------------------
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: ["-d", "{extends: default, rules: {line-length: disable}}"]

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.3.3
    hooks:
      - id: prettier
        files: "\\.(json|jsonc|ya?ml|md|html?|css|js|ts|tsx)$"
        args: ["--cache", "--ignore-unknown"]
        additional_dependencies: []

  # --- Markdown link checks (manual by default) ------------------------------
  - repo: https://github.com/lycheeverse/lychee
    rev: v0.15.1
    hooks:
      - id: lychee
        name: markdown link check (docs/)
        files: "^docs/.*\\.(md|markdown)$"
        args: ["--config", ".lychee.toml"]
        stages: [manual]

  # --- pyproject.toml canonical formatting ----------------------------------
  - repo: https://github.com/tox-dev/pyproject-fmt
    rev: 2.3.1
    hooks:
      - id: pyproject-fmt

  # --- Jupyter notebooks (nbQA wrappers + strip outputs) --------------------
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.9.1
    hooks:
      - id: nbqa-ruff
        additional_dependencies: ["ruff==0.6.9"]
        args: ["--fix"]
        files: "\\.ipynb$"
      - id: nbqa-black
        additional_dependencies: ["black==24.8.0"]
        args: ["--nbqa-mutate"]
        files: "\\.ipynb$"
      - id: nbqa-isort
        additional_dependencies: ["isort==5.13.2"]
        args: ["--nbqa-mutate"]
        files: "\\.ipynb$"

  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout
        files: "\\.ipynb$"

  # --- Security / safety -----------------------------------------------------
  - repo: https://github.com/zricethezav/gitleaks
    rev: v8.18.4
    hooks:
      - id: gitleaks
        stages: [push]           # run on push to catch secrets before remote

  - repo: https://github.com/pycqa/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        args: ["-r", "src"]
        files: "^src/.*\\.py$"

  # Use project metadata (-P) so audits work when there's no requirements.txt
  - repo: https://github.com/pypa/pip-audit
    rev: v2.7.3
    hooks:
      - id: pip-audit
        args: ["-P"]
        stages: [manual]         # heavy; run manually or in CI

  # --- GitHub Actions workflow linter ---------------------------------------
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.4
    hooks:
      - id: actionlint
        files: "^\\.github/workflows/.*\\.ya?ml$"

  # --- Git LFS check (ensure GIS/RS data tracked properly) ------------------
  - repo: https://github.com/boidolr/git-lfs-pre-commit
    rev: v0.3.3
    hooks:
      - id: git-lfs-check
        args:
          - "--pattern=*.tif,*.tiff,*.vrt,*.ovr,*.aux.xml,*.mbtiles,*.pmtiles,*.shp,*.dbf,*.shx,*.cpg,*.prj,*.gpkg,*.geoparquet,*.parquet,*.las,*.laz,*.zip,*.7z,*.tar,*.tar.gz,*.tgz,*.bz2,*.xz,*.zst"

  # --- Local project hooks (fast, targeted) ---------------------------------
  - repo: local
    hooks:
      # Validate STAC Items with kgt if available; otherwise skip gracefully.
      - id: stac-validate
        name: STAC validate (kgt if present)
        language: system
        files: "^stac/items/.*\\.json$"
        pass_filenames: false
        entry: >
          bash -c 'if command -v kgt >/dev/null 2>&1; then
            kgt validate-stac stac/items --no-strict;
          else
            echo "[skip] kgt not installed";
          fi'

      # Quick JSON sanity for data/sources using jq if available.
      - id: sources-sanity
        name: data/sources JSON sanity (jq if present)
        language: system
        files: "^data/sources/.*\\.json$"
        pass_filenames: true
        entry: >
          bash -c '
            if ! command -v jq >/dev/null 2>&1; then
              echo "[skip] jq not installed"; exit 0; fi;
            ec=0;
            for f in "$@"; do
              jq -e "type==\"object\"" "$f" >/dev/null || { echo "::error::$f is not a valid top-level JSON object"; ec=1; };
            done;
            exit $ec
          '

      # Validate web configs against JSON Schemas (runs only when those files change).
      - id: web-config-schema-app
        name: web/app.config.json schema validation
        language: python
        additional_dependencies: ["jsonschema>=4.23.0"]
        files: "^web/app\\.config\\.json$"
        pass_filenames: false
        entry: >
          python - <<'PY'
          import json, sys, pathlib
          from jsonschema import Draft202012Validator as V
          cfgp=pathlib.Path('web/app.config.json'); schp=pathlib.Path('web/config/app.config.schema.json')
          if not (cfgp.exists() and schp.exists()): sys.exit(0)
          cfg=json.load(open(cfgp)); sch=json.load(open(schp))
          errs=sorted(V(sch).iter_errors(cfg), key=lambda e: e.path)
          [print('-', '/'.join(map(str,e.path)) or '(root)', ':', e.message) for e in errs[:50]]
          sys.exit(1 if errs else 0)
          PY

      - id: web-config-schema-layers
        name: web/layers.json schema validation
        language: python
        additional_dependencies: ["jsonschema>=4.23.0"]
        files: "^web/layers\\.json$"
        pass_filenames: false
        entry: >
          python - <<'PY'
          import json, sys, pathlib
          from jsonschema import Draft202012Validator as V
          cfgp=pathlib.Path('web/layers.json'); schp=pathlib.Path('web/config/layers.schema.json')
          if not (cfgp.exists() and schp.exists()): sys.exit(0)
          cfg=json.load(open(cfgp)); sch=json.load(open(schp))
          errs=sorted(V(sch).iter_errors(cfg), key=lambda e: e.path)
          [print('-', '/'.join(map(str,e.path)) or '(root)', ':', e.message) for e in errs[:50]]
          sys.exit(1 if errs else 0)
          PY

      # Validate pack sub-docs (legend/categories/sources) against bundled $defs if present.
      - id: web-config-schema-legend
        name: web/config/legend.json schema validation (pack defs)
        language: python
        additional_dependencies: ["jsonschema>=4.23.0"]
        files: "^web/config/legend\\.json$"
        pass_filenames: false
        entry: >
          python - <<'PY'
          import json, sys, pathlib
          from jsonschema import Draft202012Validator as V
          packp=pathlib.Path('web/config/schema.json'); docp=pathlib.Path('web/config/legend.json')
          if not (packp.exists() and docp.exists()): sys.exit(0)
          pack=json.load(open(packp)); doc=json.load(open(docp))
          sch=pack.get('$defs',{}).get('legend',{})
          errs=sorted(V(sch).iter_errors(doc), key=lambda e: e.path)
          [print('-', '/'.join(map(str,e.path)) or '(root)', ':', e.message) for e in errs[:50]]
          sys.exit(1 if errs else 0)
          PY

      - id: web-config-schema-categories
        name: web/config/categories.json schema validation (pack defs)
        language: python
        additional_dependencies: ["jsonschema>=4.23.0"]
        files: "^web/config/categories\\.json$"
        pass_filenames: false
        entry: >
          python - <<'PY'
          import json, sys, pathlib
          from jsonschema import Draft202012Validator as V
          packp=pathlib.Path('web/config/schema.json'); docp=pathlib.Path('web/config/categories.json')
          if not (packp.exists() and docp.exists()): sys.exit(0)
          pack=json.load(open(packp)); doc=json.load(open(docp))
          sch=pack.get('$defs',{}).get('categories',{})
          errs=sorted(V(sch).iter_errors(doc), key=lambda e: e.path)
          [print('-', '/'.join(map(str,e.path)) or '(root)', ':', e.message) for e in errs[:50]]
          sys.exit(1 if errs else 0)
          PY

      - id: web-config-schema-sources
        name: web/config/sources.json schema validation (pack defs)
        language: python
        additional_dependencies: ["jsonschema>=4.23.0"]
        files: "^web/config/sources\\.json$"
        pass_filenames: false
        entry: >
          python - <<'PY'
          import json, sys, pathlib
          from jsonschema import Draft202012Validator as V
          packp=pathlib.Path('web/config/schema.json'); docp=pathlib.Path('web/config/sources.json')
          if not (packp.exists() and docp.exists()): sys.exit(0)
          pack=json.load(open(packp)); doc=json.load(open(docp))
          sch=pack.get('$defs',{}).get('sources',{})
          errs=sorted(V(sch).iter_errors(doc), key=lambda e: e.path)
          [print('-', '/'.join(map(str,e.path)) or '(root)', ':', e.message) for e in errs[:50]]
          sys.exit(1 if errs else 0)
          PY

      # --- Docs quality gates (fast)
      # Block stray :contentReference[oaicite:...] artifacts from leaking into docs.
      - id: docs-block-bad-citations
        name: docs: block broken contentReference artifacts
        language: system
        files: "^docs/.*\\.(md|markdown)$"
        entry: >
          bash -c '
            if grep -RIn "\:contentReference\\[oaicite" "$@"; then
              echo "::error::Broken contentReference/oaicite artifact detected in docs. Please remove or replace."; exit 1;
            fi; exit 0;
          '

      # Ensure experiments use glossary links at least once.
      - id: docs-experiments-glossary-link
        name: docs: experiments must reference Glossary
        language: system
        files: "^docs/(experiments/.*\\.md|templates/experiment\\.md)$"
        entry: >
          bash -c '
            miss=0;
            for f in "$@"; do
              if ! grep -q "\\[\\[Glossary:" "$f"; then
                echo "::error::$f: expected at least one [[Glossary:...]] link"; miss=1;
              fi
            done;
            exit $miss
          '

      # Basic structure guard for the experiment template (all required headings present).
      - id: docs-experiment-template-structure
        name: docs: experiment template structural check
        language: system
        files: "^docs/templates/experiment\\.md$"
        entry: >
          bash -c '
            req=("## Metadata" "## Problem Statement" "## Background / Motivation" "## Hypothesis" "## Methodology / Procedure" "## Parameters and Variables" "## Data Collection & References" "## Results / Observations" "## Analysis / Discussion" "## Conclusion" "## Future Work / Next Steps" "## References" "## Reproducibility Notes");
            miss=0; for h in "${req[@]}"; do grep -qF "$h" "$@"; rc=$?; if [ $rc -ne 0 ]; then echo "::error::Missing heading: $h"; miss=1; fi; done; exit $miss
          '
