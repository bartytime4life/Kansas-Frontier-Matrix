version: "3.9"

# ──────────────────────────────────────────────────────────────────────────────
# Reusable anchors
# ──────────────────────────────────────────────────────────────────────────────
x-env-defaults: &env_defaults
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"
  # GDAL/PROJ sensible defaults for networked datasets & VSI performance
  GDAL_DISABLE_READDIR_ON_OPEN: "YES"
  VSI_CACHE: "TRUE"
  VSI_CACHE_SIZE: "1000000"
  PROJ_NETWORK: "ON"
  # Makefile / STAC paths honored inside container
  KFM_DATA_DIR: "/app/data"
  KFM_STAC_DIR: "/app/stac"

x-volume-mounts: &vol_mounts
  - ./:/app:rw                        # live-edit repo
  # Optional: speed up pip installs for ad-hoc tooling in the container
  - pip-cache:/home/dev/.cache/pip:rw
  # Optional: pass-through credentials for fetchers (read-only)
  - ${HOME:-/root}/.aws:/home/dev/.aws:ro
  - ${HOME:-/root}/.netrc:/home/dev/.netrc:ro
  - ${HOME:-/root}/.config/gcloud:/home/dev/.config/gcloud:ro

x-tmpfs: &tmpfs_mounts
  - /tmp:size=512m,mode=1777
  - /var/tmp:size=256m,mode=1777

# ──────────────────────────────────────────────────────────────────────────────
# Services
# ──────────────────────────────────────────────────────────────────────────────
services:
  # Main toolbox container (GDAL + Python + your repo bind-mounted)
  kfm:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        # Keep overridable; avoids stale base images pin
        GDAL_IMAGE: ${GDAL_IMAGE:-ghcr.io/osgeo/gdal:ubuntu-small-latest}
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    # Tag the locally built image so other services can reuse it
    image: ${IMAGE_NAME:-kfm:local}
    container_name: kfm
    platform: ${PLATFORM:-linux/amd64} # override to linux/arm64 on Apple Silicon if desired
    working_dir: /app
    volumes: *vol_mounts
    user: "${UID:-1000}:${GID:-1000}"
    env_file:
      - .env
    environment:
      <<: *env_defaults
      # Allow optional tokens without baking into image
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      AWS_PROFILE: ${AWS_PROFILE:-default}
    tmpfs: *tmpfs_mounts
    tty: true
    stdin_open: true
    init: true                          # better signal handling than PID 1 bash
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-lc", "gdalinfo --version >/dev/null 2>&1"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Tiny HTTP server to preview ./web (dev-only)
  site:
    profiles: ["dev"]                   # start with: docker compose --profile dev up site
    image: ${IMAGE_NAME:-kfm:local}     # reuse the toolbox image (has Python)
    platform: ${PLATFORM:-linux/amd64}
    working_dir: /app/web
    depends_on:
      kfm:
        condition: service_healthy
    # add CORS for local vector/COG loads
    command: |
      bash -lc 'python - <<PY
from http.server import SimpleHTTPRequestHandler, ThreadingHTTPServer
class H(SimpleHTTPRequestHandler):
  def end_headers(self):
    self.send_header("Access-Control-Allow-Origin","*")
    self.send_header("Cache-Control","no-cache, no-store, must-revalidate")
    super().end_headers()
ThreadingHTTPServer(("0.0.0.0",8080),H).serve_forever()
PY'
    ports:
      - "127.0.0.1:8080:8080"           # bind to localhost for safety
    volumes: *vol_mounts
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      <<: *env_defaults
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-lc", "python - <<'PY'\nimport urllib.request,sys\ntry:\n  urllib.request.urlopen('http://127.0.0.1:8080', timeout=2)\n  sys.exit(0)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # CI-style one-shot runner: validates STAC & writes preview manifest then exits
  prebuild:
    profiles: ["ci"]                    # run with: docker compose --profile ci up --abort-on-container-exit
    image: ${IMAGE_NAME:-kfm:local}
    platform: ${PLATFORM:-linux/amd64}
    working_dir: /app
    depends_on:
      kfm:
        condition: service_healthy
    entrypoint: [ "bash", "-lc" ]
    command: |
      set -euo pipefail
      if make -qn prebuild >/dev/null 2>&1; then
        make prebuild
      else
        echo "[info] No 'prebuild' target; running quick schema checks"
        python -m pip install -q jsonschema || true
        if [ -f web/app.config.json ] && [ -f web/config/app.config.schema.json ]; then
          python - <<'PY'
import json, sys
from jsonschema import Draft202012Validator as V
cfg=json.load(open("web/app.config.json"))
sch=json.load(open("web/config/app.config.schema.json"))
errs=list(V(sch).iter_errors(cfg))
[print("-", "/".join(map(str,e.path)) or "(root)", ":", e.message) for e in errs[:20]]
sys.exit(1 if errs else 0)
PY
        fi
      fi
    volumes: *vol_mounts
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      <<: *env_defaults

  # Optional: live docs preview (MkDocs) on http://127.0.0.1:8001
  docs:
    profiles: ["docs"]
    image: ${IMAGE_NAME:-kfm:local}
    platform: ${PLATFORM:-linux/amd64}
    working_dir: /app
    depends_on:
      kfm:
        condition: service_healthy
    command: |
      bash -lc '
        python -m pip install -q mkdocs mkdocs-material || true
        mkdocs serve -a 0.0.0.0:8001
      '
    ports:
      - "127.0.0.1:8001:8001"
    volumes: *vol_mounts
    user: "${UID:-1000}:${GID:-1000}"
    environment:
      <<: *env_defaults
    restart: unless-stopped

# ──────────────────────────────────────────────────────────────────────────────
# Volumes (local caches)
# ──────────────────────────────────────────────────────────────────────────────
volumes:
  pip-cache:
