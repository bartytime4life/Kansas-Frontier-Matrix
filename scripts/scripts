#!/usr/bin/env bash
# scripts/scripts — Kansas-Frontier-Matrix task runner
# ----------------------------------------------------
# Small, dependency-light wrapper around project scripts with helpful UX.
# Usage:
#   scripts/scripts <command> [args...]
#
# Quick help:
#   scripts/scripts help
#   scripts/scripts list

set -euo pipefail

# --- paths ---------------------------------------------------------
ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
SCRIPTS="$ROOT/scripts"
STAC_DIR="$ROOT/stac"
ITEMS_DIR="$ROOT/stac/items"
SRC_DIR="$ROOT/data/sources"
WEB_CFG="$ROOT/web/app.config.json"
VALID_DIR="$ROOT/data/validation"
RAW_DIR="$ROOT/data/raw"
COGS_DIR="$ROOT/data/cogs"

# --- colors --------------------------------------------------------
if test -t 1; then
  RED=$'\033[31m'; GRN=$'\033[32m'; YLW=$'\033[33m'; BLU=$'\033[34m'; BLD=$'\033[1m'; RST=$'\033[0m'
else
  RED=""; GRN=""; YLW=""; BLU=""; BLD=""; RST=""
fi

# --- helpers -------------------------------------------------------
say() { echo "${BLD}${BLU}»${RST} $*"; }
ok()  { echo "${GRN}✓${RST} $*"; }
warn(){ echo "${YLW}⚠${RST} $*" >&2; }
die() { echo "${RED}✗${RST} $*" >&2; exit 2; }

ensure_py()   { command -v python >/dev/null 2>&1 || die "python not found"; }
ensure_file() { test -f "$1" || die "missing file: $1"; }
ensure_dir()  { test -d "$1" || die "missing directory: $1"; }

usage() {
  cat <<EOF
${BLD}Kansas-Frontier-Matrix — scripts/scripts${RST}

Usage:
  scripts/scripts <command> [args...]

Commands:
  help                 Show this help
  list                 List available commands

  # Validation
  validate:stac        Validate STAC (Items/Collections/Catalogs)
  validate:sources     Validate data/sources/*.json and STAC JSON
  validate:cogs        Validate COGs (rio → gdalinfo fallback) → JSON report

  # STAC build/render
  stac:make            Build STAC collections/items from data/cogs & vectors → stac/
  stac:scripts         Build STAC Catalog/Collection/Items for scripts/ (helper scripts)
  stac:render          Render web/app.config.json from STAC items (requires 'kgt')
  stac:validate        Shortcut: validate STAC with URL & file checks

  # Fetchers
  fetch                Fetch STAC/cat URLs → data/raw (atomic, sidecars, manifest)
  fetch:topoview       Fetch USGS TopoView maps per config (optional per-map STAC)

  # Terrain / COG
  cogs                 Convert to COGs (gdal_translate → rio-cogeo)
  terrain              Derive hillshade/slope/aspect (parallel)

  # Packaging / patching
  kmz                  Package KML + assets into KMZ (fix hrefs; strip/blank remote)
  patch:asset          Patch STAC asset fields (checksum/size; filters/batch)

  doctor               Print quick environment diagnostics

Examples:
  scripts/scripts validate:stac --check-urls --check-files
  scripts/scripts fetch data/sources/*.json stac/items/**/*.json --by-domain
  scripts/scripts cogs --inp data/processed --out data/cogs --recursive --validate
  scripts/scripts terrain data/cogs/dem/*.tif --products hillshade,slope,aspect --cog
  scripts/scripts stac:make && scripts/scripts validate:stac
  scripts/scripts fetch:topoview --max 25 --stac-dir stac/topoview
  scripts/scripts stac:render --stac stac/items --out web/app.config.json
EOF
}

cmd_list() {
  cat <<EOF
validate:stac
validate:sources
validate:cogs
stac:make
stac:scripts
stac:render
stac:validate
fetch
fetch:topoview
cogs
terrain
kmz
patch:asset
doctor
help
list
EOF
}

# --- subcommands ---------------------------------------------------

cmd_validate_stac() {
  ensure_py
  ensure_file "$SCRIPTS/validate_stac.py"
  mkdir -p "$VALID_DIR"
  say "Validating STAC under ${STAC_DIR} (items/collections/catalog)…"
  python "$SCRIPTS/validate_stac.py" \
    "$STAC_DIR" \
    --report "$VALID_DIR/validate_stac.report.json" \
    "$@"
}

cmd_validate_sources() {
  ensure_py
  ensure_file "$SCRIPTS/validate_sources.py"
  mkdir -p "$VALID_DIR"
  say "Validating sources and STAC (lenient for sources)…"
  python "$SCRIPTS/validate_sources.py" \
    "$SRC_DIR" \
    "$STAC_DIR" \
    --report "$VALID_DIR/validate_sources.report.json" \
    "$@"
}

cmd_validate_cogs() {
  ensure_py
  ensure_file "$SCRIPTS/validate_cogs.py"
  mkdir -p "$VALID_DIR"
  say "Validating COGs under ${COGS_DIR}…"
  python "$SCRIPTS/validate_cogs.py" \
    "$COGS_DIR" \
    --report "$VALID_DIR/validate_cogs.report.json" \
    "$@"
}

cmd_stac_make() {
  ensure_py
  ensure_file "$SCRIPTS/make_stac.py"
  say "Building STAC collections/items → ${STAC_DIR}"
  python "$SCRIPTS/make_stac.py" --out "$STAC_DIR" "$@"
  ok "STAC written to $STAC_DIR"
}

cmd_stac_scripts() {
  ensure_py
  ensure_file "$SCRIPTS/make_scripts_stac.py"
  say "Building STAC Catalog/Collection/Items for scripts/…"
  python "$SCRIPTS/make_scripts_stac.py" "$@"
  ok "Scripts STAC updated."
}

cmd_stac_render() {
  if command -v kgt >/dev/null 2>&1; then
    local stac_path="$ITEMS_DIR"
    local out="$WEB_CFG"
    while [[ $# -gt 0 ]]; do
      case "$1" in
        --stac) stac_path="$2"; shift 2;;
        --out)  out="$2"; shift 2;;
        *) break;;
      esac
    done
    say "Rendering viewer config from ${stac_path} → ${out}"
    kgt render-config --stac "$stac_path" --output "$out" --pretty
    ok "Wrote $out"
  else
    warn "kgt not found; cannot render config. Install the project CLI or add a Make target."
    exit 3
  fi
}

cmd_stac_validate() {
  cmd_validate_stac --check-urls --check-files "$@"
}

cmd_fetch() {
  ensure_py
  ensure_file "$SCRIPTS/fetch.py"
  if [[ $# -eq 0 ]]; then
    die "fetch requires one or more inputs (JSON/URLs). Example: scripts/scripts fetch data/sources/*.json stac/items/**/*.json"
  fi
  say "Fetching mixed inputs → ${RAW_DIR}"
  python "$SCRIPTS/fetch.py" "$@" || die "fetch failed"
}

cmd_fetch_topoview() {
  ensure_py
  ensure_file "$SCRIPTS/topoview_fetch.py"
  local args=()
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --source|--max|--stac-dir|--retries|--timeout|--user-agent|--manifest|--sleep)
        args+=("$1" "$2"); shift 2;;
      --overwrite|--no-progress)
        args+=("$1"); shift;;
      *) break;;
    esac
  done
  if [[ ! " ${args[*]} " =~ " --source " ]]; then
    args+=(--source "$SRC_DIR/usgs_topoview.json")
  fi
  say "Fetching TopoView with args: ${args[*]}"
  python "$SCRIPTS/topoview_fetch.py" "${args[@]}"
}

cmd_cogs() {
  ensure_py
  ensure_file "$SCRIPTS/make_cogs.py"
  if [[ $# -eq 0 ]]; then
    die "cogs requires flags, e.g.: --inp <dir> --out <dir> [--recursive] [--validate]"
  fi
  say "Converting to COGs…"
  python "$SCRIPTS/make_cogs.py" "$@"
}

cmd_terrain() {
  ensure_py
  ensure_file "$SCRIPTS/derive_terrain.py"
  if [[ $# -eq 0 ]]; then
    die "terrain requires inputs, e.g.: data/cogs/dem/*.tif --products hillshade,slope,aspect --cog"
  fi
  say "Deriving terrain products…"
  python "$SCRIPTS/derive_terrain.py" "$@"
}

cmd_kmz() {
  ensure_py
  ensure_file "$SCRIPTS/pack_kmz.py"
  if [[ $# -eq 0 ]]; then
    die "kmz requires flags, e.g.: --kml <path> --out <dir> [--strip-remote] [--extra 'glob']"
  fi
  say "Packaging KMZ…"
  python "$SCRIPTS/pack_kmz.py" "$@"
}

cmd_patch_asset() {
  ensure_py
  ensure_file "$SCRIPTS/patch_stac_asset.py"
  if [[ $# -eq 0 ]]; then
    die "patch:asset requires args, e.g.: stac/items/**/*.json --asset '*' --from-file-size --from-sha256-file --role data"
  fi
  say "Patching STAC asset fields…"
  python "$SCRIPTS/patch_stac_asset.py" "$@"
}

cmd_doctor() {
  say "Repo          : $ROOT"
  say "Python        : $(python --version 2>&1 || echo 'not found')"
  say "Requests      : $(python - <<'PY' 2>/dev/null || echo 'n/a')
import sys
try:
  import requests; print(requests.__version__)
except Exception:
  print("n/a")
PY
)"
  say "tqdm          : $(python - <<'PY' 2>/dev/null || echo 'n/a')
try:
  import tqdm; print(tqdm.__version__)
except Exception:
  print("n/a")
PY
)"
  say "jsonschema    : $(python - <<'PY' 2>/dev/null || echo 'n/a')
try:
  import jsonschema; print(jsonschema.__version__)
except Exception:
  print("n/a")
PY
)"
  say "GDAL tools    : $(command -v gdal_translate >/dev/null 2>&1 && echo 'gdal_translate OK' || echo 'gdal_translate missing')"
  say "rio cogeo     : $(command -v rio >/dev/null 2>&1 && echo 'rio OK' || echo 'rio missing')"
  say "kgt CLI       : $(command -v kgt >/dev/null 2>&1 && kgt --version || echo 'not found')"
  say "Paths         : stac=$STAC_DIR  sources=$SRC_DIR  cogs=$COGS_DIR  raw=$RAW_DIR  scripts=$SCRIPTS"
  ok  "Doctor completed."
}

# --- dispatch ------------------------------------------------------
main() {
  local cmd="${1:-help}"; shift || true
  case "$cmd" in
    help) usage;;
    list) cmd_list;;
    validate:stac) cmd_validate_stac "$@";;
    validate:sources) cmd_validate_sources "$@";;
    validate:cogs) cmd_validate_cogs "$@";;
    stac:make) cmd_stac_make "$@";;
    stac:scripts) cmd_stac_scripts "$@";;
    stac:render) cmd_stac_render "$@";;
    stac:validate) cmd_stac_validate "$@";;
    fetch) cmd_fetch "$@";;
    fetch:topoview) cmd_fetch_topoview "$@";;
    cogs) cmd_cogs "$@";;
    terrain) cmd_terrain "$@";;
    kmz) cmd_kmz "$@";;
    patch:asset) cmd_patch_asset "$@";;
    doctor) cmd_doctor;;
    *) die "unknown command: $cmd (see: scripts/scripts help)";;
  esac
}

main "$@"
